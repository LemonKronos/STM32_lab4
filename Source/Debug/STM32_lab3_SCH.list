
STM32_lab3_SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e0  080036e0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  080036e0  080036e0  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e0  080036e0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080036e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200000b8  080037a0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080037a0  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cf7  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029df  00000000  00000000  00031dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000347b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018571  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea99  00000000  00000000  0004e281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086749  00000000  00000000  0005cd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d74  00000000  00000000  000e34b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080036a4 	.word	0x080036a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080036a4 	.word	0x080036a4

0800014c <LedBlinky>:
#include "display7seg.h"
#include "fsm_input_driven.h"

extern traffic_way main_traffic, side_traffic;

void LedBlinky(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(TEST_Timer_GPIO_Port, TEST_Timer_Pin);
 8000150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <LedBlinky+0x14>)
 8000156:	f002 f97a 	bl	800244e <HAL_GPIO_TogglePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <timeCountDown>:
void timeCountDown(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	main_traffic.count_down--;
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <timeCountDown+0x28>)
 800016a:	785b      	ldrb	r3, [r3, #1]
 800016c:	3b01      	subs	r3, #1
 800016e:	b2da      	uxtb	r2, r3
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <timeCountDown+0x28>)
 8000172:	705a      	strb	r2, [r3, #1]
	side_traffic.count_down--;
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <timeCountDown+0x2c>)
 8000176:	785b      	ldrb	r3, [r3, #1]
 8000178:	3b01      	subs	r3, #1
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <timeCountDown+0x2c>)
 800017e:	705a      	strb	r2, [r3, #1]
	update7SEG(traffic);
 8000180:	2000      	movs	r0, #0
 8000182:	f000 fa99 	bl	80006b8 <update7SEG>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000030 	.word	0x20000030
 8000190:	20000038 	.word	0x20000038

08000194 <timeCountUpFast>:
void timeCountUpFast(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	if(led_counter[0] < MAX_COUNT_DOWN) led_counter[0]++;
 8000198:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <timeCountUpFast+0x2c>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b62      	cmp	r3, #98	; 0x62
 800019e:	d806      	bhi.n	80001ae <timeCountUpFast+0x1a>
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <timeCountUpFast+0x2c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	3301      	adds	r3, #1
 80001a6:	b2da      	uxtb	r2, r3
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <timeCountUpFast+0x2c>)
 80001aa:	701a      	strb	r2, [r3, #0]
 80001ac:	e002      	b.n	80001b4 <timeCountUpFast+0x20>
	else led_counter[0] = 0;
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <timeCountUpFast+0x2c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
	update7SEG(counter);
 80001b4:	2001      	movs	r0, #1
 80001b6:	f000 fa7f 	bl	80006b8 <update7SEG>
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	20000118 	.word	0x20000118

080001c4 <timeCountDownFast>:
void timeCountDownFast(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	if(led_counter[0] > 0) led_counter[0]--;
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <timeCountDownFast+0x2c>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d006      	beq.n	80001de <timeCountDownFast+0x1a>
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <timeCountDownFast+0x2c>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	3b01      	subs	r3, #1
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <timeCountDownFast+0x2c>)
 80001da:	701a      	strb	r2, [r3, #0]
 80001dc:	e002      	b.n	80001e4 <timeCountDownFast+0x20>
	else led_counter[0] = MAX_COUNT_DOWN;
 80001de:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <timeCountDownFast+0x2c>)
 80001e0:	2263      	movs	r2, #99	; 0x63
 80001e2:	701a      	strb	r2, [r3, #0]
	update7SEG(counter);
 80001e4:	2001      	movs	r0, #1
 80001e6:	f000 fa67 	bl	80006b8 <update7SEG>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000118 	.word	0x20000118

080001f4 <display7segment>:
void display7segment(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	if(led_index >= MAX_LED) led_index = 0;
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <display7segment+0x28>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2b03      	cmp	r3, #3
 80001fe:	d902      	bls.n	8000206 <display7segment+0x12>
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <display7segment+0x28>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
	display7SEG(led_index++);
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <display7segment+0x28>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	1c5a      	adds	r2, r3, #1
 800020c:	b2d1      	uxtb	r1, r2
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <display7segment+0x28>)
 8000210:	7011      	strb	r1, [r2, #0]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f9aa 	bl	800056c <display7SEG>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	200000e0 	.word	0x200000e0

08000220 <toggleLedColor>:
void toggleLedColor(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	ledColor* color = (ledColor*)TaskPara.para1;
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <toggleLedColor+0x60>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	607b      	str	r3, [r7, #4]
	switch(*color){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d018      	beq.n	8000266 <toggleLedColor+0x46>
 8000234:	2b02      	cmp	r3, #2
 8000236:	dc1f      	bgt.n	8000278 <toggleLedColor+0x58>
 8000238:	2b00      	cmp	r3, #0
 800023a:	d002      	beq.n	8000242 <toggleLedColor+0x22>
 800023c:	2b01      	cmp	r3, #1
 800023e:	d009      	beq.n	8000254 <toggleLedColor+0x34>
	case lGREEN:
		HAL_GPIO_TogglePin(LED0_G_GPIO_Port, LED0_G_Pin);
		HAL_GPIO_TogglePin(LED1_G_GPIO_Port, LED1_G_Pin);
		break;
	}
}
 8000240:	e01a      	b.n	8000278 <toggleLedColor+0x58>
		HAL_GPIO_TogglePin(LED0_R_GPIO_Port, LED0_R_Pin);
 8000242:	2101      	movs	r1, #1
 8000244:	480f      	ldr	r0, [pc, #60]	; (8000284 <toggleLedColor+0x64>)
 8000246:	f002 f902 	bl	800244e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_R_GPIO_Port, LED1_R_Pin);
 800024a:	2108      	movs	r1, #8
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <toggleLedColor+0x64>)
 800024e:	f002 f8fe 	bl	800244e <HAL_GPIO_TogglePin>
		break;
 8000252:	e011      	b.n	8000278 <toggleLedColor+0x58>
		HAL_GPIO_TogglePin(LED0_Y_GPIO_Port, LED0_Y_Pin);
 8000254:	2102      	movs	r1, #2
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <toggleLedColor+0x64>)
 8000258:	f002 f8f9 	bl	800244e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_Y_GPIO_Port, LED1_Y_Pin);
 800025c:	2110      	movs	r1, #16
 800025e:	4809      	ldr	r0, [pc, #36]	; (8000284 <toggleLedColor+0x64>)
 8000260:	f002 f8f5 	bl	800244e <HAL_GPIO_TogglePin>
		break;
 8000264:	e008      	b.n	8000278 <toggleLedColor+0x58>
		HAL_GPIO_TogglePin(LED0_G_GPIO_Port, LED0_G_Pin);
 8000266:	2104      	movs	r1, #4
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <toggleLedColor+0x64>)
 800026a:	f002 f8f0 	bl	800244e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_G_GPIO_Port, LED1_G_Pin);
 800026e:	2120      	movs	r1, #32
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <toggleLedColor+0x64>)
 8000272:	f002 f8ec 	bl	800244e <HAL_GPIO_TogglePin>
		break;
 8000276:	bf00      	nop
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000164 	.word	0x20000164
 8000284:	40010c00 	.word	0x40010c00

08000288 <SCH_Init>:
 *      Author: TRONG DAT
 */
#include "Scheduler.h"
#include "input_reading.h"

void SCH_Init(){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	while(SCH_Task_List != NULL){
 800028e:	e00a      	b.n	80002a6 <SCH_Init+0x1e>
		STask* temp = SCH_Task_List;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <SCH_Init+0x40>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	607b      	str	r3, [r7, #4]
		SCH_Task_List = SCH_Task_List->next;
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <SCH_Init+0x40>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	691b      	ldr	r3, [r3, #16]
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <SCH_Init+0x40>)
 800029e:	6013      	str	r3, [r2, #0]
		free(temp);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f003 f92b 	bl	80034fc <free>
	while(SCH_Task_List != NULL){
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <SCH_Init+0x40>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1f0      	bne.n	8000290 <SCH_Init+0x8>
	}
	ERROR_CODE = 0;
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <SCH_Init+0x44>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80002b4:	4806      	ldr	r0, [pc, #24]	; (80002d0 <SCH_Init+0x48>)
 80002b6:	f002 fd63 	bl	8002d80 <HAL_TIM_Base_Start_IT>
	HAL_IWDG_Init(&hiwdg);
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <SCH_Init+0x4c>)
 80002bc:	f002 f8e0 	bl	8002480 <HAL_IWDG_Init>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000114 	.word	0x20000114
 80002cc:	2000011a 	.word	0x2000011a
 80002d0:	20000184 	.word	0x20000184
 80002d4:	20000178 	.word	0x20000178

080002d8 <SCH_Update>:

void SCH_Update() {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	if(SCH_Task_List != NULL){
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <SCH_Update+0x70>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d02b      	beq.n	800033e <SCH_Update+0x66>
		if(SCH_Task_List->Delay > 0){
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <SCH_Update+0x70>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d005      	beq.n	80002fc <SCH_Update+0x24>
			SCH_Task_List->Delay--;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <SCH_Update+0x70>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	3a01      	subs	r2, #1
 80002f8:	605a      	str	r2, [r3, #4]
				}
				temp = temp->next;
			}
		}
	}
}
 80002fa:	e020      	b.n	800033e <SCH_Update+0x66>
			STask* temp = SCH_Task_List;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <SCH_Update+0x70>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	607b      	str	r3, [r7, #4]
			while(temp->Delay == 0){
 8000302:	e018      	b.n	8000336 <SCH_Update+0x5e>
				temp->RunMe = 1;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2201      	movs	r2, #1
 8000308:	731a      	strb	r2, [r3, #12]
				if(temp->Period){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d00e      	beq.n	8000330 <SCH_Update+0x58>
					RUNNING_TASK--;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <SCH_Update+0x74>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <SCH_Update+0x74>)
 800031c:	701a      	strb	r2, [r3, #0]
					SCH_AddTask(temp->pTask, temp->Period, temp->Period);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6818      	ldr	r0, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6899      	ldr	r1, [r3, #8]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	461a      	mov	r2, r3
 800032c:	f000 f810 	bl	8000350 <SCH_AddTask>
				temp = temp->next;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	607b      	str	r3, [r7, #4]
			while(temp->Delay == 0){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0e2      	beq.n	8000304 <SCH_Update+0x2c>
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000114 	.word	0x20000114
 800034c:	20000127 	.word	0x20000127

08000350 <SCH_AddTask>:

void SCH_AddTask(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	if(RUNNING_TASK >= SCH_MAX_TASK){
 800035c:	4b30      	ldr	r3, [pc, #192]	; (8000420 <SCH_AddTask+0xd0>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b13      	cmp	r3, #19
 8000362:	d903      	bls.n	800036c <SCH_AddTask+0x1c>
		ERROR_CODE = ERROR_SCH_REACH_MAX_TASKS;
 8000364:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <SCH_AddTask+0xd4>)
 8000366:	2202      	movs	r2, #2
 8000368:	701a      	strb	r2, [r3, #0]
		return;
 800036a:	e056      	b.n	800041a <SCH_AddTask+0xca>
	}
	STask* newTask = malloc(sizeof(STask));
 800036c:	2014      	movs	r0, #20
 800036e:	f003 f8bd 	bl	80034ec <malloc>
 8000372:	4603      	mov	r3, r0
 8000374:	617b      	str	r3, [r7, #20]
	newTask->pTask = pFunction;
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]
	newTask->Delay = DELAY;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	605a      	str	r2, [r3, #4]
	newTask->Period = PERIOD;
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	609a      	str	r2, [r3, #8]
	newTask->TaskID = ID_HOLDER++;
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <SCH_AddTask+0xd8>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	b2d1      	uxtb	r1, r2
 8000390:	4a25      	ldr	r2, [pc, #148]	; (8000428 <SCH_AddTask+0xd8>)
 8000392:	7011      	strb	r1, [r2, #0]
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	7353      	strb	r3, [r2, #13]
	newTask->next = NULL;
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]

	if(SCH_Task_List == NULL){
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <SCH_AddTask+0xdc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d103      	bne.n	80003ae <SCH_AddTask+0x5e>
		SCH_Task_List = newTask;
 80003a6:	4a21      	ldr	r2, [pc, #132]	; (800042c <SCH_AddTask+0xdc>)
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	6013      	str	r3, [r2, #0]
 80003ac:	e02f      	b.n	800040e <SCH_AddTask+0xbe>
	}
	else{
		STask* temp = SCH_Task_List;
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <SCH_AddTask+0xdc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	61fb      	str	r3, [r7, #28]
		STask* pre;
		while(temp != NULL && temp->Delay < newTask->Delay){
 80003b4:	e00b      	b.n	80003ce <SCH_AddTask+0x7e>
			newTask->Delay -= temp->Delay;
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	685a      	ldr	r2, [r3, #4]
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	1ad2      	subs	r2, r2, r3
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	605a      	str	r2, [r3, #4]
			pre = temp;
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	61bb      	str	r3, [r7, #24]
			temp = temp->next;
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	61fb      	str	r3, [r7, #28]
		while(temp != NULL && temp->Delay < newTask->Delay){
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d005      	beq.n	80003e0 <SCH_AddTask+0x90>
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	685a      	ldr	r2, [r3, #4]
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d3ea      	bcc.n	80003b6 <SCH_AddTask+0x66>
		}
		newTask->next = temp;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	69fa      	ldr	r2, [r7, #28]
 80003e4:	611a      	str	r2, [r3, #16]
		if(pre == NULL){
 80003e6:	69bb      	ldr	r3, [r7, #24]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d103      	bne.n	80003f4 <SCH_AddTask+0xa4>
			SCH_Task_List = newTask;
 80003ec:	4a0f      	ldr	r2, [pc, #60]	; (800042c <SCH_AddTask+0xdc>)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	e002      	b.n	80003fa <SCH_AddTask+0xaa>
		}
		else{
			pre->next = newTask;
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	697a      	ldr	r2, [r7, #20]
 80003f8:	611a      	str	r2, [r3, #16]
		}
		if(temp != NULL){
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <SCH_AddTask+0xbe>
			temp->Delay -= newTask->Delay;
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	605a      	str	r2, [r3, #4]
		}
	}
	RUNNING_TASK++;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <SCH_AddTask+0xd0>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b02      	ldr	r3, [pc, #8]	; (8000420 <SCH_AddTask+0xd0>)
 8000418:	701a      	strb	r2, [r3, #0]
}
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000127 	.word	0x20000127
 8000424:	2000011a 	.word	0x2000011a
 8000428:	20000170 	.word	0x20000170
 800042c:	20000114 	.word	0x20000114

08000430 <SCH_Dispatch>:

void SCH_Dispatch() {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	if(SCH_Task_List != NULL){
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <SCH_Dispatch+0x68>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d025      	beq.n	800048a <SCH_Dispatch+0x5a>
		while(SCH_Task_List->RunMe >= 1){
 800043e:	e01f      	b.n	8000480 <SCH_Dispatch+0x50>
			SCH_Task_List->pTask();
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <SCH_Dispatch+0x68>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4798      	blx	r3
			SCH_Task_List->RunMe--;
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SCH_Dispatch+0x68>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	7b1a      	ldrb	r2, [r3, #12]
 800044e:	3a01      	subs	r2, #1
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	731a      	strb	r2, [r3, #12]
			if(SCH_Task_List->Period == 0) RUNNING_TASK--;
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <SCH_Dispatch+0x68>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d105      	bne.n	800046a <SCH_Dispatch+0x3a>
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <SCH_Dispatch+0x6c>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3b01      	subs	r3, #1
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <SCH_Dispatch+0x6c>)
 8000468:	701a      	strb	r2, [r3, #0]
			STask* deleteTask = SCH_Task_List;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <SCH_Dispatch+0x68>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	607b      	str	r3, [r7, #4]
			SCH_Task_List = SCH_Task_List->next;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <SCH_Dispatch+0x68>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <SCH_Dispatch+0x68>)
 8000478:	6013      	str	r3, [r2, #0]
			free(deleteTask);
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f003 f83e 	bl	80034fc <free>
		while(SCH_Task_List->RunMe >= 1){
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <SCH_Dispatch+0x68>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	7b1b      	ldrb	r3, [r3, #12]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1da      	bne.n	8000440 <SCH_Dispatch+0x10>
		}
	}
#ifdef SCH_REPORT_STATUS
    SCH_ReportStatus();
#endif
    SCH_GoSleep();
 800048a:	f000 f84f 	bl	800052c <SCH_GoSleep>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000114 	.word	0x20000114
 800049c:	20000127 	.word	0x20000127

080004a0 <SCH_DeleteTask>:

R_CODE SCH_DeleteTask(const void (*pFunction)()) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	if(SCH_Task_List == NULL) ERROR_CODE = ERROR_SCH_TASK_EMPTY;
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <SCH_DeleteTask+0x84>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d104      	bne.n	80004ba <SCH_DeleteTask+0x1a>
 80004b0:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <SCH_DeleteTask+0x88>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
			}
			temp = temp->next;
		}
		return DONE;
	}
	return FAILED;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e030      	b.n	800051c <SCH_DeleteTask+0x7c>
		STask* temp = SCH_Task_List;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <SCH_DeleteTask+0x84>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	60fb      	str	r3, [r7, #12]
		if(SCH_Task_List->pTask == pFunction){
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <SCH_DeleteTask+0x84>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d123      	bne.n	8000514 <SCH_DeleteTask+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	bf00      	nop
			SCH_Task_List = SCH_Task_List->next;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <SCH_DeleteTask+0x84>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	4a13      	ldr	r2, [pc, #76]	; (8000524 <SCH_DeleteTask+0x84>)
 80004d8:	6013      	str	r3, [r2, #0]
			free(temp);
 80004da:	68f8      	ldr	r0, [r7, #12]
 80004dc:	f003 f80e 	bl	80034fc <free>
  __ASM volatile ("cpsie i" : : : "memory");
 80004e0:	b662      	cpsie	i
}
 80004e2:	bf00      	nop
		while(temp != NULL){
 80004e4:	e016      	b.n	8000514 <SCH_DeleteTask+0x74>
			if(temp->next->pTask == pFunction){
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d10d      	bne.n	800050e <SCH_DeleteTask+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
 80004f2:	b672      	cpsid	i
}
 80004f4:	bf00      	nop
				STask* deleteTask = temp->next;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	691b      	ldr	r3, [r3, #16]
 80004fa:	60bb      	str	r3, [r7, #8]
				temp->next = deleteTask->next;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	691a      	ldr	r2, [r3, #16]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	611a      	str	r2, [r3, #16]
				free(deleteTask);
 8000504:	68b8      	ldr	r0, [r7, #8]
 8000506:	f002 fff9 	bl	80034fc <free>
  __ASM volatile ("cpsie i" : : : "memory");
 800050a:	b662      	cpsie	i
}
 800050c:	bf00      	nop
			temp = temp->next;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	60fb      	str	r3, [r7, #12]
		while(temp != NULL){
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1e5      	bne.n	80004e6 <SCH_DeleteTask+0x46>
		return DONE;
 800051a:	2301      	movs	r3, #1
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000114 	.word	0x20000114
 8000528:	2000011a 	.word	0x2000011a

0800052c <SCH_GoSleep>:
    }
    #endif
}
#endif

void SCH_GoSleep(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	__WFI(); // System wait for interrupt
 8000530:	bf30      	wfi
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800054c:	d108      	bne.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x24>
		button_reading();
 800054e:	f000 ffbd 	bl	80014cc <button_reading>
		SCH_Update();
 8000552:	f7ff fec1 	bl	80002d8 <SCH_Update>
		HAL_IWDG_Refresh(&hiwdg);
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000558:	f001 ffd6 	bl	8002508 <HAL_IWDG_Refresh>
		#ifdef P_CLOCK
			p_clockRun();
 800055c:	f000 ff76 	bl	800144c <p_clockRun>
		#endif
	}
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000178 	.word	0x20000178

0800056c <display7SEG>:
    SEG5_Pin,
    SEG6_Pin
};


void display7SEG(uint8_t index){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b03      	cmp	r3, #3
 800057a:	dc11      	bgt.n	80005a0 <display7SEG+0x34>
 800057c:	2b00      	cmp	r3, #0
 800057e:	f2c0 808f 	blt.w	80006a0 <display7SEG+0x134>
 8000582:	2b03      	cmp	r3, #3
 8000584:	f200 808c 	bhi.w	80006a0 <display7SEG+0x134>
 8000588:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <display7SEG+0x24>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	080005a7 	.word	0x080005a7
 8000594:	080005db 	.word	0x080005db
 8000598:	0800060f 	.word	0x0800060f
 800059c:	08000643 	.word	0x08000643
 80005a0:	2b63      	cmp	r3, #99	; 0x63
 80005a2:	d068      	beq.n	8000676 <display7SEG+0x10a>
 80005a4:	e07c      	b.n	80006a0 <display7SEG+0x134>
	case 0://SEG_0
		number7SEG(led_buffer[0]);
 80005a6:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <display7SEG+0x144>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f918 	bl	80007e0 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2108      	movs	r1, #8
 80005b4:	483f      	ldr	r0, [pc, #252]	; (80006b4 <display7SEG+0x148>)
 80005b6:	f001 ff32 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	483d      	ldr	r0, [pc, #244]	; (80006b4 <display7SEG+0x148>)
 80005c0:	f001 ff2d 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	483a      	ldr	r0, [pc, #232]	; (80006b4 <display7SEG+0x148>)
 80005ca:	f001 ff28 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2140      	movs	r1, #64	; 0x40
 80005d2:	4838      	ldr	r0, [pc, #224]	; (80006b4 <display7SEG+0x148>)
 80005d4:	f001 ff23 	bl	800241e <HAL_GPIO_WritePin>
		break;
 80005d8:	e065      	b.n	80006a6 <display7SEG+0x13a>
	case 1://SEG_1
		number7SEG(led_buffer[1]);
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <display7SEG+0x144>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f8fe 	bl	80007e0 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4832      	ldr	r0, [pc, #200]	; (80006b4 <display7SEG+0x148>)
 80005ea:	f001 ff18 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	4830      	ldr	r0, [pc, #192]	; (80006b4 <display7SEG+0x148>)
 80005f4:	f001 ff13 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	482d      	ldr	r0, [pc, #180]	; (80006b4 <display7SEG+0x148>)
 80005fe:	f001 ff0e 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	482b      	ldr	r0, [pc, #172]	; (80006b4 <display7SEG+0x148>)
 8000608:	f001 ff09 	bl	800241e <HAL_GPIO_WritePin>
		break;
 800060c:	e04b      	b.n	80006a6 <display7SEG+0x13a>
	case 2://SEG_2
		number7SEG(led_buffer[2]);
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <display7SEG+0x144>)
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f8e4 	bl	80007e0 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2108      	movs	r1, #8
 800061c:	4825      	ldr	r0, [pc, #148]	; (80006b4 <display7SEG+0x148>)
 800061e:	f001 fefe 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2110      	movs	r1, #16
 8000626:	4823      	ldr	r0, [pc, #140]	; (80006b4 <display7SEG+0x148>)
 8000628:	f001 fef9 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2120      	movs	r1, #32
 8000630:	4820      	ldr	r0, [pc, #128]	; (80006b4 <display7SEG+0x148>)
 8000632:	f001 fef4 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2140      	movs	r1, #64	; 0x40
 800063a:	481e      	ldr	r0, [pc, #120]	; (80006b4 <display7SEG+0x148>)
 800063c:	f001 feef 	bl	800241e <HAL_GPIO_WritePin>
		break;
 8000640:	e031      	b.n	80006a6 <display7SEG+0x13a>
	case 3://SEG_3
		number7SEG(led_buffer[3]);
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <display7SEG+0x144>)
 8000644:	78db      	ldrb	r3, [r3, #3]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f8ca 	bl	80007e0 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2108      	movs	r1, #8
 8000650:	4818      	ldr	r0, [pc, #96]	; (80006b4 <display7SEG+0x148>)
 8000652:	f001 fee4 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2110      	movs	r1, #16
 800065a:	4816      	ldr	r0, [pc, #88]	; (80006b4 <display7SEG+0x148>)
 800065c:	f001 fedf 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <display7SEG+0x148>)
 8000666:	f001 feda 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <display7SEG+0x148>)
 8000670:	f001 fed5 	bl	800241e <HAL_GPIO_WritePin>
		break;
 8000674:	e017      	b.n	80006a6 <display7SEG+0x13a>
	case 99:// ALL OFF
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <display7SEG+0x148>)
 800067c:	f001 fecf 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <display7SEG+0x148>)
 8000686:	f001 feca 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	4809      	ldr	r0, [pc, #36]	; (80006b4 <display7SEG+0x148>)
 8000690:	f001 fec5 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <display7SEG+0x148>)
 800069a:	f001 fec0 	bl	800241e <HAL_GPIO_WritePin>
		break;
 800069e:	e002      	b.n	80006a6 <display7SEG+0x13a>
	default:
		index = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
		break;
 80006a4:	bf00      	nop
	}
};
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000011c 	.word	0x2000011c
 80006b4:	40010800 	.word	0x40010800

080006b8 <update7SEG>:

void update7SEG(update_from where){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	if(where == traffic){
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d13c      	bne.n	8000742 <update7SEG+0x8a>
		led_buffer[0] = main_traffic.count_down / 10;
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <update7SEG+0x114>)
 80006ca:	785b      	ldrb	r3, [r3, #1]
 80006cc:	4a40      	ldr	r2, [pc, #256]	; (80007d0 <update7SEG+0x118>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <update7SEG+0x11c>)
 80006d8:	701a      	strb	r2, [r3, #0]
		if(led_buffer[0] == 0) led_buffer[0] = 10;
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <update7SEG+0x11c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <update7SEG+0x30>
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <update7SEG+0x11c>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = main_traffic.count_down % 10;
 80006e8:	4b38      	ldr	r3, [pc, #224]	; (80007cc <update7SEG+0x114>)
 80006ea:	785a      	ldrb	r2, [r3, #1]
 80006ec:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <update7SEG+0x118>)
 80006ee:	fba3 1302 	umull	r1, r3, r3, r2
 80006f2:	08d9      	lsrs	r1, r3, #3
 80006f4:	460b      	mov	r3, r1
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	440b      	add	r3, r1
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <update7SEG+0x11c>)
 8000702:	705a      	strb	r2, [r3, #1]

		led_buffer[2] = side_traffic.count_down / 10;
 8000704:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <update7SEG+0x120>)
 8000706:	785b      	ldrb	r3, [r3, #1]
 8000708:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <update7SEG+0x118>)
 800070a:	fba2 2303 	umull	r2, r3, r2, r3
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <update7SEG+0x11c>)
 8000714:	709a      	strb	r2, [r3, #2]
		if(led_buffer[2] == 0) led_buffer[2] = 10;
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <update7SEG+0x11c>)
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <update7SEG+0x6c>
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <update7SEG+0x11c>)
 8000720:	220a      	movs	r2, #10
 8000722:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = side_traffic.count_down % 10;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <update7SEG+0x120>)
 8000726:	785a      	ldrb	r2, [r3, #1]
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <update7SEG+0x118>)
 800072a:	fba3 1302 	umull	r1, r3, r3, r2
 800072e:	08d9      	lsrs	r1, r3, #3
 8000730:	460b      	mov	r3, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <update7SEG+0x11c>)
 800073e:	70da      	strb	r2, [r3, #3]

		led_buffer[2] = led_counter[1] / 10;
		if(led_buffer[2] == 0) led_buffer[2] = 10;
		led_buffer[3] = led_counter[1] % 10;
	}
};
 8000740:	e03e      	b.n	80007c0 <update7SEG+0x108>
	else if(where == counter){
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d13b      	bne.n	80007c0 <update7SEG+0x108>
		led_buffer[0] = led_counter[0] / 10;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <update7SEG+0x124>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <update7SEG+0x118>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <update7SEG+0x11c>)
 8000758:	701a      	strb	r2, [r3, #0]
		if(led_buffer[0] == 0) led_buffer[0] = 10;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <update7SEG+0x11c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d102      	bne.n	8000768 <update7SEG+0xb0>
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <update7SEG+0x11c>)
 8000764:	220a      	movs	r2, #10
 8000766:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = led_counter[0] % 10;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <update7SEG+0x124>)
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <update7SEG+0x118>)
 800076e:	fba3 1302 	umull	r1, r3, r3, r2
 8000772:	08d9      	lsrs	r1, r3, #3
 8000774:	460b      	mov	r3, r1
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <update7SEG+0x11c>)
 8000782:	705a      	strb	r2, [r3, #1]
		led_buffer[2] = led_counter[1] / 10;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <update7SEG+0x124>)
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <update7SEG+0x118>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <update7SEG+0x11c>)
 8000794:	709a      	strb	r2, [r3, #2]
		if(led_buffer[2] == 0) led_buffer[2] = 10;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <update7SEG+0x11c>)
 8000798:	789b      	ldrb	r3, [r3, #2]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <update7SEG+0xec>
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <update7SEG+0x11c>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = led_counter[1] % 10;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <update7SEG+0x124>)
 80007a6:	785a      	ldrb	r2, [r3, #1]
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <update7SEG+0x118>)
 80007aa:	fba3 1302 	umull	r1, r3, r3, r2
 80007ae:	08d9      	lsrs	r1, r3, #3
 80007b0:	460b      	mov	r3, r1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <update7SEG+0x11c>)
 80007be:	70da      	strb	r2, [r3, #3]
};
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000030 	.word	0x20000030
 80007d0:	cccccccd 	.word	0xcccccccd
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	20000038 	.word	0x20000038
 80007dc:	20000118 	.word	0x20000118

080007e0 <number7SEG>:
	main_traffic.count_down--;
	side_traffic.count_down--;
	update7SEG(traffic);
};

void number7SEG(uint8_t number){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	switch(number) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b0a      	cmp	r3, #10
 80007ee:	f200 828d 	bhi.w	8000d0c <number7SEG+0x52c>
 80007f2:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <number7SEG+0x18>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	08000897 	.word	0x08000897
 80007fc:	08000909 	.word	0x08000909
 8000800:	0800097b 	.word	0x0800097b
 8000804:	080009ed 	.word	0x080009ed
 8000808:	08000a69 	.word	0x08000a69
 800080c:	08000adb 	.word	0x08000adb
 8000810:	08000b4d 	.word	0x08000b4d
 8000814:	08000bbf 	.word	0x08000bbf
 8000818:	08000c31 	.word	0x08000c31
 800081c:	08000c93 	.word	0x08000c93
 8000820:	08000825 	.word	0x08000825
	    case 10: // ALL OFF
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000824:	4b8e      	ldr	r3, [pc, #568]	; (8000a60 <number7SEG+0x280>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a8e      	ldr	r2, [pc, #568]	; (8000a64 <number7SEG+0x284>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2201      	movs	r2, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fdf5 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000834:	4b8a      	ldr	r3, [pc, #552]	; (8000a60 <number7SEG+0x280>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a8a      	ldr	r2, [pc, #552]	; (8000a64 <number7SEG+0x284>)
 800083a:	8851      	ldrh	r1, [r2, #2]
 800083c:	2201      	movs	r2, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fded 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 8000844:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <number7SEG+0x280>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	4a86      	ldr	r2, [pc, #536]	; (8000a64 <number7SEG+0x284>)
 800084a:	8891      	ldrh	r1, [r2, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fde5 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000854:	4b82      	ldr	r3, [pc, #520]	; (8000a60 <number7SEG+0x280>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a82      	ldr	r2, [pc, #520]	; (8000a64 <number7SEG+0x284>)
 800085a:	88d1      	ldrh	r1, [r2, #6]
 800085c:	2201      	movs	r2, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fddd 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000864:	4b7e      	ldr	r3, [pc, #504]	; (8000a60 <number7SEG+0x280>)
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	4a7e      	ldr	r2, [pc, #504]	; (8000a64 <number7SEG+0x284>)
 800086a:	8911      	ldrh	r1, [r2, #8]
 800086c:	2201      	movs	r2, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fdd5 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000874:	4b7a      	ldr	r3, [pc, #488]	; (8000a60 <number7SEG+0x280>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a7a      	ldr	r2, [pc, #488]	; (8000a64 <number7SEG+0x284>)
 800087a:	8951      	ldrh	r1, [r2, #10]
 800087c:	2201      	movs	r2, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fdcd 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 8000884:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <number7SEG+0x280>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a76      	ldr	r2, [pc, #472]	; (8000a64 <number7SEG+0x284>)
 800088a:	8991      	ldrh	r1, [r2, #12]
 800088c:	2201      	movs	r2, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fdc5 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000894:	e273      	b.n	8000d7e <number7SEG+0x59e>
	    case 0:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <number7SEG+0x280>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a72      	ldr	r2, [pc, #456]	; (8000a64 <number7SEG+0x284>)
 800089c:	8811      	ldrh	r1, [r2, #0]
 800089e:	2200      	movs	r2, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fdbc 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <number7SEG+0x280>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4a6e      	ldr	r2, [pc, #440]	; (8000a64 <number7SEG+0x284>)
 80008ac:	8851      	ldrh	r1, [r2, #2]
 80008ae:	2200      	movs	r2, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fdb4 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80008b6:	4b6a      	ldr	r3, [pc, #424]	; (8000a60 <number7SEG+0x280>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4a6a      	ldr	r2, [pc, #424]	; (8000a64 <number7SEG+0x284>)
 80008bc:	8891      	ldrh	r1, [r2, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fdac 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80008c6:	4b66      	ldr	r3, [pc, #408]	; (8000a60 <number7SEG+0x280>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	4a66      	ldr	r2, [pc, #408]	; (8000a64 <number7SEG+0x284>)
 80008cc:	88d1      	ldrh	r1, [r2, #6]
 80008ce:	2200      	movs	r2, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fda4 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <number7SEG+0x280>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	4a62      	ldr	r2, [pc, #392]	; (8000a64 <number7SEG+0x284>)
 80008dc:	8911      	ldrh	r1, [r2, #8]
 80008de:	2200      	movs	r2, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd9c 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <number7SEG+0x280>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a5e      	ldr	r2, [pc, #376]	; (8000a64 <number7SEG+0x284>)
 80008ec:	8951      	ldrh	r1, [r2, #10]
 80008ee:	2200      	movs	r2, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fd94 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 80008f6:	4b5a      	ldr	r3, [pc, #360]	; (8000a60 <number7SEG+0x280>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a5a      	ldr	r2, [pc, #360]	; (8000a64 <number7SEG+0x284>)
 80008fc:	8991      	ldrh	r1, [r2, #12]
 80008fe:	2201      	movs	r2, #1
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fd8c 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000906:	e23a      	b.n	8000d7e <number7SEG+0x59e>
	    case 1:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000908:	4b55      	ldr	r3, [pc, #340]	; (8000a60 <number7SEG+0x280>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a55      	ldr	r2, [pc, #340]	; (8000a64 <number7SEG+0x284>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2201      	movs	r2, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fd83 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000918:	4b51      	ldr	r3, [pc, #324]	; (8000a60 <number7SEG+0x280>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a51      	ldr	r2, [pc, #324]	; (8000a64 <number7SEG+0x284>)
 800091e:	8851      	ldrh	r1, [r2, #2]
 8000920:	2200      	movs	r2, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fd7b 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000928:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <number7SEG+0x280>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	4a4d      	ldr	r2, [pc, #308]	; (8000a64 <number7SEG+0x284>)
 800092e:	8891      	ldrh	r1, [r2, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fd73 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000938:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <number7SEG+0x280>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a49      	ldr	r2, [pc, #292]	; (8000a64 <number7SEG+0x284>)
 800093e:	88d1      	ldrh	r1, [r2, #6]
 8000940:	2201      	movs	r2, #1
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fd6b 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000948:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <number7SEG+0x280>)
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <number7SEG+0x284>)
 800094e:	8911      	ldrh	r1, [r2, #8]
 8000950:	2201      	movs	r2, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fd63 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <number7SEG+0x280>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a41      	ldr	r2, [pc, #260]	; (8000a64 <number7SEG+0x284>)
 800095e:	8951      	ldrh	r1, [r2, #10]
 8000960:	2201      	movs	r2, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fd5b 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <number7SEG+0x280>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <number7SEG+0x284>)
 800096e:	8991      	ldrh	r1, [r2, #12]
 8000970:	2201      	movs	r2, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fd53 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000978:	e201      	b.n	8000d7e <number7SEG+0x59e>
	    case 2:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <number7SEG+0x280>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a39      	ldr	r2, [pc, #228]	; (8000a64 <number7SEG+0x284>)
 8000980:	8811      	ldrh	r1, [r2, #0]
 8000982:	2200      	movs	r2, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fd4a 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <number7SEG+0x280>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a35      	ldr	r2, [pc, #212]	; (8000a64 <number7SEG+0x284>)
 8000990:	8851      	ldrh	r1, [r2, #2]
 8000992:	2200      	movs	r2, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fd42 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <number7SEG+0x280>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <number7SEG+0x284>)
 80009a0:	8891      	ldrh	r1, [r2, #4]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fd3a 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <number7SEG+0x280>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <number7SEG+0x284>)
 80009b0:	88d1      	ldrh	r1, [r2, #6]
 80009b2:	2200      	movs	r2, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fd32 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <number7SEG+0x280>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <number7SEG+0x284>)
 80009c0:	8911      	ldrh	r1, [r2, #8]
 80009c2:	2200      	movs	r2, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fd2a 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <number7SEG+0x280>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <number7SEG+0x284>)
 80009d0:	8951      	ldrh	r1, [r2, #10]
 80009d2:	2201      	movs	r2, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fd22 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <number7SEG+0x280>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <number7SEG+0x284>)
 80009e0:	8991      	ldrh	r1, [r2, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fd1a 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 80009ea:	e1c8      	b.n	8000d7e <number7SEG+0x59e>
	    case 3:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <number7SEG+0x280>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <number7SEG+0x284>)
 80009f2:	8811      	ldrh	r1, [r2, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fd11 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <number7SEG+0x280>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <number7SEG+0x284>)
 8000a02:	8851      	ldrh	r1, [r2, #2]
 8000a04:	2200      	movs	r2, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fd09 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <number7SEG+0x280>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <number7SEG+0x284>)
 8000a12:	8891      	ldrh	r1, [r2, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fd01 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <number7SEG+0x280>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <number7SEG+0x284>)
 8000a22:	88d1      	ldrh	r1, [r2, #6]
 8000a24:	2200      	movs	r2, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fcf9 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <number7SEG+0x280>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <number7SEG+0x284>)
 8000a32:	8911      	ldrh	r1, [r2, #8]
 8000a34:	2201      	movs	r2, #1
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fcf1 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <number7SEG+0x280>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <number7SEG+0x284>)
 8000a42:	8951      	ldrh	r1, [r2, #10]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fce9 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <number7SEG+0x280>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <number7SEG+0x284>)
 8000a52:	8991      	ldrh	r1, [r2, #12]
 8000a54:	2200      	movs	r2, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fce1 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000a5c:	e18f      	b.n	8000d7e <number7SEG+0x59e>
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000
 8000a64:	2000001c 	.word	0x2000001c
	    case 4:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000a68:	4ba6      	ldr	r3, [pc, #664]	; (8000d04 <number7SEG+0x524>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4aa6      	ldr	r2, [pc, #664]	; (8000d08 <number7SEG+0x528>)
 8000a6e:	8811      	ldrh	r1, [r2, #0]
 8000a70:	2201      	movs	r2, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fcd3 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000a78:	4ba2      	ldr	r3, [pc, #648]	; (8000d04 <number7SEG+0x524>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4aa2      	ldr	r2, [pc, #648]	; (8000d08 <number7SEG+0x528>)
 8000a7e:	8851      	ldrh	r1, [r2, #2]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fccb 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000a88:	4b9e      	ldr	r3, [pc, #632]	; (8000d04 <number7SEG+0x524>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4a9e      	ldr	r2, [pc, #632]	; (8000d08 <number7SEG+0x528>)
 8000a8e:	8891      	ldrh	r1, [r2, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fcc3 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000a98:	4b9a      	ldr	r3, [pc, #616]	; (8000d04 <number7SEG+0x524>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a9a      	ldr	r2, [pc, #616]	; (8000d08 <number7SEG+0x528>)
 8000a9e:	88d1      	ldrh	r1, [r2, #6]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fcbb 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000aa8:	4b96      	ldr	r3, [pc, #600]	; (8000d04 <number7SEG+0x524>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	4a96      	ldr	r2, [pc, #600]	; (8000d08 <number7SEG+0x528>)
 8000aae:	8911      	ldrh	r1, [r2, #8]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fcb3 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000ab8:	4b92      	ldr	r3, [pc, #584]	; (8000d04 <number7SEG+0x524>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	4a92      	ldr	r2, [pc, #584]	; (8000d08 <number7SEG+0x528>)
 8000abe:	8951      	ldrh	r1, [r2, #10]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fcab 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000ac8:	4b8e      	ldr	r3, [pc, #568]	; (8000d04 <number7SEG+0x524>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a8e      	ldr	r2, [pc, #568]	; (8000d08 <number7SEG+0x528>)
 8000ace:	8991      	ldrh	r1, [r2, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fca3 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000ad8:	e151      	b.n	8000d7e <number7SEG+0x59e>
	    case 5:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000ada:	4b8a      	ldr	r3, [pc, #552]	; (8000d04 <number7SEG+0x524>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a8a      	ldr	r2, [pc, #552]	; (8000d08 <number7SEG+0x528>)
 8000ae0:	8811      	ldrh	r1, [r2, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fc9a 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000aea:	4b86      	ldr	r3, [pc, #536]	; (8000d04 <number7SEG+0x524>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a86      	ldr	r2, [pc, #536]	; (8000d08 <number7SEG+0x528>)
 8000af0:	8851      	ldrh	r1, [r2, #2]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fc92 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000afa:	4b82      	ldr	r3, [pc, #520]	; (8000d04 <number7SEG+0x524>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	4a82      	ldr	r2, [pc, #520]	; (8000d08 <number7SEG+0x528>)
 8000b00:	8891      	ldrh	r1, [r2, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fc8a 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000b0a:	4b7e      	ldr	r3, [pc, #504]	; (8000d04 <number7SEG+0x524>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	4a7e      	ldr	r2, [pc, #504]	; (8000d08 <number7SEG+0x528>)
 8000b10:	88d1      	ldrh	r1, [r2, #6]
 8000b12:	2200      	movs	r2, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fc82 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000b1a:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <number7SEG+0x524>)
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	4a7a      	ldr	r2, [pc, #488]	; (8000d08 <number7SEG+0x528>)
 8000b20:	8911      	ldrh	r1, [r2, #8]
 8000b22:	2201      	movs	r2, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fc7a 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000b2a:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <number7SEG+0x524>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a76      	ldr	r2, [pc, #472]	; (8000d08 <number7SEG+0x528>)
 8000b30:	8951      	ldrh	r1, [r2, #10]
 8000b32:	2200      	movs	r2, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fc72 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000b3a:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <number7SEG+0x524>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a72      	ldr	r2, [pc, #456]	; (8000d08 <number7SEG+0x528>)
 8000b40:	8991      	ldrh	r1, [r2, #12]
 8000b42:	2200      	movs	r2, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fc6a 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000b4a:	e118      	b.n	8000d7e <number7SEG+0x59e>
	    case 6:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000b4c:	4b6d      	ldr	r3, [pc, #436]	; (8000d04 <number7SEG+0x524>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a6d      	ldr	r2, [pc, #436]	; (8000d08 <number7SEG+0x528>)
 8000b52:	8811      	ldrh	r1, [r2, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fc61 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000b5c:	4b69      	ldr	r3, [pc, #420]	; (8000d04 <number7SEG+0x524>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	4a69      	ldr	r2, [pc, #420]	; (8000d08 <number7SEG+0x528>)
 8000b62:	8851      	ldrh	r1, [r2, #2]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fc59 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000b6c:	4b65      	ldr	r3, [pc, #404]	; (8000d04 <number7SEG+0x524>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a65      	ldr	r2, [pc, #404]	; (8000d08 <number7SEG+0x528>)
 8000b72:	8891      	ldrh	r1, [r2, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fc51 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000b7c:	4b61      	ldr	r3, [pc, #388]	; (8000d04 <number7SEG+0x524>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4a61      	ldr	r2, [pc, #388]	; (8000d08 <number7SEG+0x528>)
 8000b82:	88d1      	ldrh	r1, [r2, #6]
 8000b84:	2200      	movs	r2, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fc49 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 8000b8c:	4b5d      	ldr	r3, [pc, #372]	; (8000d04 <number7SEG+0x524>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	4a5d      	ldr	r2, [pc, #372]	; (8000d08 <number7SEG+0x528>)
 8000b92:	8911      	ldrh	r1, [r2, #8]
 8000b94:	2200      	movs	r2, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fc41 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000b9c:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <number7SEG+0x524>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a59      	ldr	r2, [pc, #356]	; (8000d08 <number7SEG+0x528>)
 8000ba2:	8951      	ldrh	r1, [r2, #10]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fc39 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000bac:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <number7SEG+0x524>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a55      	ldr	r2, [pc, #340]	; (8000d08 <number7SEG+0x528>)
 8000bb2:	8991      	ldrh	r1, [r2, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fc31 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000bbc:	e0df      	b.n	8000d7e <number7SEG+0x59e>
	    case 7:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000bbe:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <number7SEG+0x524>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a51      	ldr	r2, [pc, #324]	; (8000d08 <number7SEG+0x528>)
 8000bc4:	8811      	ldrh	r1, [r2, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fc28 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000bce:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <number7SEG+0x524>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4a4d      	ldr	r2, [pc, #308]	; (8000d08 <number7SEG+0x528>)
 8000bd4:	8851      	ldrh	r1, [r2, #2]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fc20 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <number7SEG+0x524>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4a49      	ldr	r2, [pc, #292]	; (8000d08 <number7SEG+0x528>)
 8000be4:	8891      	ldrh	r1, [r2, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fc18 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000bee:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <number7SEG+0x524>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4a45      	ldr	r2, [pc, #276]	; (8000d08 <number7SEG+0x528>)
 8000bf4:	88d1      	ldrh	r1, [r2, #6]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fc10 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000bfe:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <number7SEG+0x524>)
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	4a41      	ldr	r2, [pc, #260]	; (8000d08 <number7SEG+0x528>)
 8000c04:	8911      	ldrh	r1, [r2, #8]
 8000c06:	2201      	movs	r2, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fc08 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <number7SEG+0x524>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a3d      	ldr	r2, [pc, #244]	; (8000d08 <number7SEG+0x528>)
 8000c14:	8951      	ldrh	r1, [r2, #10]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fc00 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <number7SEG+0x524>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a39      	ldr	r2, [pc, #228]	; (8000d08 <number7SEG+0x528>)
 8000c24:	8991      	ldrh	r1, [r2, #12]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fbf8 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000c2e:	e0a6      	b.n	8000d7e <number7SEG+0x59e>
	    case 8:
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000c30:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <number7SEG+0x524>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4a34      	ldr	r2, [pc, #208]	; (8000d08 <number7SEG+0x528>)
 8000c36:	8851      	ldrh	r1, [r2, #2]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fbef 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <number7SEG+0x524>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <number7SEG+0x528>)
 8000c46:	8891      	ldrh	r1, [r2, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fbe7 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <number7SEG+0x524>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <number7SEG+0x528>)
 8000c56:	88d1      	ldrh	r1, [r2, #6]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fbdf 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <number7SEG+0x524>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <number7SEG+0x528>)
 8000c66:	8911      	ldrh	r1, [r2, #8]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fbd7 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <number7SEG+0x524>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <number7SEG+0x528>)
 8000c76:	8951      	ldrh	r1, [r2, #10]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fbcf 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <number7SEG+0x524>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <number7SEG+0x528>)
 8000c86:	8991      	ldrh	r1, [r2, #12]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fbc7 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000c90:	e075      	b.n	8000d7e <number7SEG+0x59e>
	    case 9:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <number7SEG+0x524>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <number7SEG+0x528>)
 8000c98:	8811      	ldrh	r1, [r2, #0]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fbbe 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <number7SEG+0x524>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <number7SEG+0x528>)
 8000ca8:	8851      	ldrh	r1, [r2, #2]
 8000caa:	2200      	movs	r2, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fbb6 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <number7SEG+0x524>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <number7SEG+0x528>)
 8000cb8:	8891      	ldrh	r1, [r2, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fbae 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <number7SEG+0x524>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <number7SEG+0x528>)
 8000cc8:	88d1      	ldrh	r1, [r2, #6]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fba6 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <number7SEG+0x524>)
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <number7SEG+0x528>)
 8000cd8:	8911      	ldrh	r1, [r2, #8]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fb9e 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <number7SEG+0x524>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <number7SEG+0x528>)
 8000ce8:	8951      	ldrh	r1, [r2, #10]
 8000cea:	2200      	movs	r2, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 fb96 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <number7SEG+0x524>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <number7SEG+0x528>)
 8000cf8:	8991      	ldrh	r1, [r2, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fb8e 	bl	800241e <HAL_GPIO_WritePin>
	        break;
 8000d02:	e03c      	b.n	8000d7e <number7SEG+0x59e>
 8000d04:	20000000 	.word	0x20000000
 8000d08:	2000001c 	.word	0x2000001c
	    default:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <number7SEG+0x5a8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <number7SEG+0x5ac>)
 8000d12:	8811      	ldrh	r1, [r2, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fb81 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <number7SEG+0x5a8>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <number7SEG+0x5ac>)
 8000d22:	8851      	ldrh	r1, [r2, #2]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fb79 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <number7SEG+0x5a8>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <number7SEG+0x5ac>)
 8000d32:	8891      	ldrh	r1, [r2, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fb71 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <number7SEG+0x5a8>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <number7SEG+0x5ac>)
 8000d42:	88d1      	ldrh	r1, [r2, #6]
 8000d44:	2200      	movs	r2, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fb69 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <number7SEG+0x5a8>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <number7SEG+0x5ac>)
 8000d52:	8911      	ldrh	r1, [r2, #8]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fb61 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <number7SEG+0x5a8>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <number7SEG+0x5ac>)
 8000d62:	8951      	ldrh	r1, [r2, #10]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fb59 	bl	800241e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <number7SEG+0x5a8>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <number7SEG+0x5ac>)
 8000d72:	8991      	ldrh	r1, [r2, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fb51 	bl	800241e <HAL_GPIO_WritePin>
	}
};
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	2000001c 	.word	0x2000001c

08000d90 <fsm_input_driven_normal>:
config_mode Cmode = WAIT;

uint8_t fsm_input_driven_normal_StateChange = 1;
uint8_t fsm_input_driven_config_StateChange = 1;

void fsm_input_driven_normal(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	switch(Nmode){
 8000d94:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	f200 80c5 	bhi.w	8000f28 <fsm_input_driven_normal+0x198>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <fsm_input_driven_normal+0x14>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000db5 	.word	0x08000db5
 8000da8:	08000e2d 	.word	0x08000e2d
 8000dac:	08000e81 	.word	0x08000e81
 8000db0:	08000ed1 	.word	0x08000ed1
	case NORMAL:
		if(flagForButtonPress[1] == 1){
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <fsm_input_driven_normal+0x1b0>)
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <fsm_input_driven_normal+0x3e>
			fsm_input_driven_normal_StateChange = 1;
 8000dbc:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
			Nmode = FREEZE;
 8000dc2:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000dc8:	f000 fcb6 	bl	8001738 <resetButtonFlag>
				fsm_input_driven_normal_StateChange = 0;
			}
			fsm_traffic(&t_mode_main, &main_traffic);
			fsm_traffic(&t_mode_side, &side_traffic);
		}
		break;
 8000dcc:	e0b4      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
		else if(flagForButtonPress[2] == 1){
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <fsm_input_driven_normal+0x1b0>)
 8000dd0:	789b      	ldrb	r3, [r3, #2]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d108      	bne.n	8000de8 <fsm_input_driven_normal+0x58>
			fsm_input_driven_normal_StateChange = 1;
 8000dd6:	4b5b      	ldr	r3, [pc, #364]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
			Nmode = FORWARD;
 8000ddc:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000de2:	f000 fca9 	bl	8001738 <resetButtonFlag>
		break;
 8000de6:	e0a7      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
		else if(flagForButtonHold[2] == 1){
 8000de8:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <fsm_input_driven_normal+0x1b8>)
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <fsm_input_driven_normal+0x72>
			fsm_input_driven_normal_StateChange = 1;
 8000df0:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
			Nmode = FAST;
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000dfc:	f000 fc9c 	bl	8001738 <resetButtonFlag>
		break;
 8000e00:	e09a      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
			if(fsm_input_driven_normal_StateChange){
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <fsm_input_driven_normal+0x8a>
				SCH_AddTask(timeCountDown, 100, 100);
 8000e0a:	2264      	movs	r2, #100	; 0x64
 8000e0c:	2164      	movs	r1, #100	; 0x64
 8000e0e:	484f      	ldr	r0, [pc, #316]	; (8000f4c <fsm_input_driven_normal+0x1bc>)
 8000e10:	f7ff fa9e 	bl	8000350 <SCH_AddTask>
				fsm_input_driven_normal_StateChange = 0;
 8000e14:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
			fsm_traffic(&t_mode_main, &main_traffic);
 8000e1a:	494d      	ldr	r1, [pc, #308]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000e1c:	484d      	ldr	r0, [pc, #308]	; (8000f54 <fsm_input_driven_normal+0x1c4>)
 8000e1e:	f000 fee5 	bl	8001bec <fsm_traffic>
			fsm_traffic(&t_mode_side, &side_traffic);
 8000e22:	494d      	ldr	r1, [pc, #308]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000e24:	484d      	ldr	r0, [pc, #308]	; (8000f5c <fsm_input_driven_normal+0x1cc>)
 8000e26:	f000 fee1 	bl	8001bec <fsm_traffic>
		break;
 8000e2a:	e085      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
	case FREEZE:
		if(flagForButtonPress[1] == 1){// CHECK BUTTON
 8000e2c:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <fsm_input_driven_normal+0x1b0>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d108      	bne.n	8000e46 <fsm_input_driven_normal+0xb6>
			fsm_input_driven_normal_StateChange = 1;
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
			Nmode = NORMAL;
 8000e3a:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000e40:	f000 fc7a 	bl	8001738 <resetButtonFlag>
				fsm_input_driven_normal_StateChange = 0;
			}
			fsm_traffic(&t_mode_main, &main_traffic);
			fsm_traffic(&t_mode_side, &side_traffic);
		}
		break;
 8000e44:	e078      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
		else if(flagForButtonPress[2] == 1){
 8000e46:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <fsm_input_driven_normal+0x1b0>)
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d105      	bne.n	8000e5a <fsm_input_driven_normal+0xca>
			Nmode = FORWARD;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000e50:	2203      	movs	r2, #3
 8000e52:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000e54:	f000 fc70 	bl	8001738 <resetButtonFlag>
		break;
 8000e58:	e06e      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
			if(fsm_input_driven_normal_StateChange){
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <fsm_input_driven_normal+0xde>
				SCH_DeleteTask(timeCountDown);
 8000e62:	483a      	ldr	r0, [pc, #232]	; (8000f4c <fsm_input_driven_normal+0x1bc>)
 8000e64:	f7ff fb1c 	bl	80004a0 <SCH_DeleteTask>
				fsm_input_driven_normal_StateChange = 0;
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
			fsm_traffic(&t_mode_main, &main_traffic);
 8000e6e:	4938      	ldr	r1, [pc, #224]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000e70:	4838      	ldr	r0, [pc, #224]	; (8000f54 <fsm_input_driven_normal+0x1c4>)
 8000e72:	f000 febb 	bl	8001bec <fsm_traffic>
			fsm_traffic(&t_mode_side, &side_traffic);
 8000e76:	4938      	ldr	r1, [pc, #224]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000e78:	4838      	ldr	r0, [pc, #224]	; (8000f5c <fsm_input_driven_normal+0x1cc>)
 8000e7a:	f000 feb7 	bl	8001bec <fsm_traffic>
		break;
 8000e7e:	e05b      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
	case FAST:
		if(BUTTON[2] == HOLD){
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <fsm_input_driven_normal+0x1d0>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d117      	bne.n	8000eb8 <fsm_input_driven_normal+0x128>
			if(fsm_input_driven_normal_StateChange){
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00a      	beq.n	8000ea6 <fsm_input_driven_normal+0x116>
				SCH_DeleteTask(timeCountDown);
 8000e90:	482e      	ldr	r0, [pc, #184]	; (8000f4c <fsm_input_driven_normal+0x1bc>)
 8000e92:	f7ff fb05 	bl	80004a0 <SCH_DeleteTask>
				SCH_AddTask(timeCountDown, 50, 50);
 8000e96:	2232      	movs	r2, #50	; 0x32
 8000e98:	2132      	movs	r1, #50	; 0x32
 8000e9a:	482c      	ldr	r0, [pc, #176]	; (8000f4c <fsm_input_driven_normal+0x1bc>)
 8000e9c:	f7ff fa58 	bl	8000350 <SCH_AddTask>
				fsm_input_driven_normal_StateChange = 0;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
			}
			fsm_traffic(&t_mode_main, &main_traffic);
 8000ea6:	492a      	ldr	r1, [pc, #168]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000ea8:	482a      	ldr	r0, [pc, #168]	; (8000f54 <fsm_input_driven_normal+0x1c4>)
 8000eaa:	f000 fe9f 	bl	8001bec <fsm_traffic>
			fsm_traffic(&t_mode_side, &side_traffic);
 8000eae:	492a      	ldr	r1, [pc, #168]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000eb0:	482a      	ldr	r0, [pc, #168]	; (8000f5c <fsm_input_driven_normal+0x1cc>)
 8000eb2:	f000 fe9b 	bl	8001bec <fsm_traffic>
			SCH_DeleteTask(timeCountDown);
			fsm_input_driven_normal_StateChange = 1;
			Nmode = NORMAL;
			resetButtonFlag();
		}
		break;
 8000eb6:	e03f      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
			SCH_DeleteTask(timeCountDown);
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <fsm_input_driven_normal+0x1bc>)
 8000eba:	f7ff faf1 	bl	80004a0 <SCH_DeleteTask>
			fsm_input_driven_normal_StateChange = 1;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
			Nmode = NORMAL;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000eca:	f000 fc35 	bl	8001738 <resetButtonFlag>
		break;
 8000ece:	e033      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
	case FORWARD:
		SCH_DeleteTask(timeCountDown);
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <fsm_input_driven_normal+0x1bc>)
 8000ed2:	f7ff fae5 	bl	80004a0 <SCH_DeleteTask>
		if(main_traffic.count_down > side_traffic.count_down){
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000ed8:	785a      	ldrb	r2, [r3, #1]
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d90b      	bls.n	8000efa <fsm_input_driven_normal+0x16a>
			main_traffic.count_down -= side_traffic.count_down;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000ee4:	785a      	ldrb	r2, [r3, #1]
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000ef0:	705a      	strb	r2, [r3, #1]
			side_traffic.count_down = 0;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	705a      	strb	r2, [r3, #1]
 8000ef8:	e00a      	b.n	8000f10 <fsm_input_driven_normal+0x180>
		}
		else{
			side_traffic.count_down -= main_traffic.count_down;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000efc:	785a      	ldrb	r2, [r3, #1]
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000f00:	785b      	ldrb	r3, [r3, #1]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <fsm_input_driven_normal+0x1c8>)
 8000f08:	705a      	strb	r2, [r3, #1]
			main_traffic.count_down = 0;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <fsm_input_driven_normal+0x1c0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	705a      	strb	r2, [r3, #1]
		}
		update7SEG(traffic);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fbd1 	bl	80006b8 <update7SEG>
		fsm_input_driven_normal_StateChange = 0;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <fsm_input_driven_normal+0x1b4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		Nmode = FREEZE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
		resetButtonFlag();
 8000f22:	f000 fc09 	bl	8001738 <resetButtonFlag>
		break;
 8000f26:	e007      	b.n	8000f38 <fsm_input_driven_normal+0x1a8>
	default:
		Nmode = NORMAL;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <fsm_input_driven_normal+0x1ac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <fsm_input_driven_normal+0x1d4>)
 8000f32:	f001 fa8c 	bl	800244e <HAL_GPIO_TogglePin>
		break;
 8000f36:	bf00      	nop
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000d4 	.word	0x200000d4
 8000f40:	20000130 	.word	0x20000130
 8000f44:	2000002a 	.word	0x2000002a
 8000f48:	20000124 	.word	0x20000124
 8000f4c:	08000165 	.word	0x08000165
 8000f50:	20000030 	.word	0x20000030
 8000f54:	20000104 	.word	0x20000104
 8000f58:	20000038 	.word	0x20000038
 8000f5c:	20000048 	.word	0x20000048
 8000f60:	20000120 	.word	0x20000120
 8000f64:	40010c00 	.word	0x40010c00

08000f68 <fsm_input_driven_config>:

void fsm_input_driven_config(uint8_t* time1, uint8_t* time2){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	switch(Cmode){
 8000f72:	4b70      	ldr	r3, [pc, #448]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	f200 80cf 	bhi.w	800111a <fsm_input_driven_config+0x1b2>
 8000f7c:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <fsm_input_driven_config+0x1c>)
 8000f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f82:	bf00      	nop
 8000f84:	08000f99 	.word	0x08000f99
 8000f88:	0800105f 	.word	0x0800105f
 8000f8c:	08001089 	.word	0x08001089
 8000f90:	080010bd 	.word	0x080010bd
 8000f94:	080010e7 	.word	0x080010e7
	case WAIT:
		if(flagForButtonPress[1] == 1){
 8000f98:	4b67      	ldr	r3, [pc, #412]	; (8001138 <fsm_input_driven_config+0x1d0>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <fsm_input_driven_config+0x44>
			Cmode = UP;
 8000fa0:	4b64      	ldr	r3, [pc, #400]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000fa6:	f000 fbc7 	bl	8001738 <resetButtonFlag>
			if(fsm_input_driven_config_StateChange){
				// NOTHING HERE
				fsm_input_driven_config_StateChange = 0;
			}
		}
		break;
 8000faa:	e0ba      	b.n	8001122 <fsm_input_driven_config+0x1ba>
		else if(flagForButtonHold[1] == 1){
 8000fac:	4b63      	ldr	r3, [pc, #396]	; (800113c <fsm_input_driven_config+0x1d4>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <fsm_input_driven_config+0x5e>
			fsm_input_driven_config_StateChange = 1;
 8000fb4:	4b62      	ldr	r3, [pc, #392]	; (8001140 <fsm_input_driven_config+0x1d8>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
			Cmode = UP_FAST;
 8000fba:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000fc0:	f000 fbba 	bl	8001738 <resetButtonFlag>
		break;
 8000fc4:	e0ad      	b.n	8001122 <fsm_input_driven_config+0x1ba>
		else if(flagForButtonDoubleTap[1] == 1){
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <fsm_input_driven_config+0x1dc>)
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d105      	bne.n	8000fda <fsm_input_driven_config+0x72>
			Cmode = DOWN;
 8000fce:	4b59      	ldr	r3, [pc, #356]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000fd4:	f000 fbb0 	bl	8001738 <resetButtonFlag>
		break;
 8000fd8:	e0a3      	b.n	8001122 <fsm_input_driven_config+0x1ba>
		else if(flagForButtonTapHold[1] == 1){
 8000fda:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <fsm_input_driven_config+0x1e0>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d108      	bne.n	8000ff4 <fsm_input_driven_config+0x8c>
			fsm_input_driven_config_StateChange = 1;
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <fsm_input_driven_config+0x1d8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
			Cmode = DOWN_FAST;
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8000fee:	f000 fba3 	bl	8001738 <resetButtonFlag>
		break;
 8000ff2:	e096      	b.n	8001122 <fsm_input_driven_config+0x1ba>
		else if(flagForButtonPress[2] == 1){
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <fsm_input_driven_config+0x1d0>)
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d128      	bne.n	800104e <fsm_input_driven_config+0xe6>
			if(led_counter[0] != 0){
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <fsm_input_driven_config+0x1e4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 808e 	beq.w	8001122 <fsm_input_driven_config+0x1ba>
				if(led_counter[0] >= *time1){
 8001006:	4b51      	ldr	r3, [pc, #324]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d30c      	bcc.n	800102c <fsm_input_driven_config+0xc4>
					*time2 = *time2 + (led_counter[0] - *time1);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001018:	7819      	ldrb	r1, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	1acb      	subs	r3, r1, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e00b      	b.n	8001044 <fsm_input_driven_config+0xdc>
					*time2 = *time2 - (*time1 - led_counter[0]);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001032:	7819      	ldrb	r1, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	1acb      	subs	r3, r1, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	b2da      	uxtb	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	701a      	strb	r2, [r3, #0]
				*time1 = led_counter[0];
 8001044:	4b41      	ldr	r3, [pc, #260]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	701a      	strb	r2, [r3, #0]
		break;
 800104c:	e069      	b.n	8001122 <fsm_input_driven_config+0x1ba>
			if(fsm_input_driven_config_StateChange){
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <fsm_input_driven_config+0x1d8>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d065      	beq.n	8001122 <fsm_input_driven_config+0x1ba>
				fsm_input_driven_config_StateChange = 0;
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <fsm_input_driven_config+0x1d8>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
		break;
 800105c:	e061      	b.n	8001122 <fsm_input_driven_config+0x1ba>
	case UP:
		if(led_counter[0] < MAX_COUNT_DOWN) led_counter[0]++;
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b62      	cmp	r3, #98	; 0x62
 8001064:	d806      	bhi.n	8001074 <fsm_input_driven_config+0x10c>
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e002      	b.n	800107a <fsm_input_driven_config+0x112>
		else led_counter[0] = 0;
 8001074:	4b35      	ldr	r3, [pc, #212]	; (800114c <fsm_input_driven_config+0x1e4>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
		update7SEG(counter);
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff fb1c 	bl	80006b8 <update7SEG>
		Cmode = WAIT;
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
		break;
 8001086:	e051      	b.n	800112c <fsm_input_driven_config+0x1c4>
	case UP_FAST:
		if(BUTTON[1] == HOLD){
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <fsm_input_driven_config+0x1e8>)
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d10c      	bne.n	80010aa <fsm_input_driven_config+0x142>
			if(fsm_input_driven_config_StateChange){
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <fsm_input_driven_config+0x1d8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d046      	beq.n	8001126 <fsm_input_driven_config+0x1be>
				SCH_AddTask(timeCountUpFast, 25, 25);
 8001098:	2219      	movs	r2, #25
 800109a:	2119      	movs	r1, #25
 800109c:	482d      	ldr	r0, [pc, #180]	; (8001154 <fsm_input_driven_config+0x1ec>)
 800109e:	f7ff f957 	bl	8000350 <SCH_AddTask>
				fsm_input_driven_config_StateChange = 0;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <fsm_input_driven_config+0x1d8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		else{
			SCH_DeleteTask(timeCountUpFast);
			resetButtonFlag();
			Cmode = WAIT;
		}
		break;
 80010a8:	e03d      	b.n	8001126 <fsm_input_driven_config+0x1be>
			SCH_DeleteTask(timeCountUpFast);
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <fsm_input_driven_config+0x1ec>)
 80010ac:	f7ff f9f8 	bl	80004a0 <SCH_DeleteTask>
			resetButtonFlag();
 80010b0:	f000 fb42 	bl	8001738 <resetButtonFlag>
			Cmode = WAIT;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <fsm_input_driven_config+0x1cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		break;
 80010ba:	e034      	b.n	8001126 <fsm_input_driven_config+0x1be>
	case DOWN:
		if(led_counter[0] > 0) led_counter[0]--;
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <fsm_input_driven_config+0x1e4>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <fsm_input_driven_config+0x16a>
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <fsm_input_driven_config+0x1e4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <fsm_input_driven_config+0x1e4>)
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e002      	b.n	80010d8 <fsm_input_driven_config+0x170>
		else led_counter[0] = MAX_COUNT_DOWN;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <fsm_input_driven_config+0x1e4>)
 80010d4:	2263      	movs	r2, #99	; 0x63
 80010d6:	701a      	strb	r2, [r3, #0]
		update7SEG(counter);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff faed 	bl	80006b8 <update7SEG>
		Cmode = WAIT;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <fsm_input_driven_config+0x1cc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		break;
 80010e4:	e022      	b.n	800112c <fsm_input_driven_config+0x1c4>
	case DOWN_FAST:
		if(BUTTON[1] == TAP_HOLD){
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <fsm_input_driven_config+0x1e8>)
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d10c      	bne.n	8001108 <fsm_input_driven_config+0x1a0>
			if(fsm_input_driven_config_StateChange){
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <fsm_input_driven_config+0x1d8>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d019      	beq.n	800112a <fsm_input_driven_config+0x1c2>
				SCH_AddTask(timeCountDownFast, 25, 25);
 80010f6:	2219      	movs	r2, #25
 80010f8:	2119      	movs	r1, #25
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <fsm_input_driven_config+0x1f0>)
 80010fc:	f7ff f928 	bl	8000350 <SCH_AddTask>
				fsm_input_driven_config_StateChange = 0;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <fsm_input_driven_config+0x1d8>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		else{
			SCH_DeleteTask(timeCountDownFast);
			resetButtonFlag();
			Cmode = WAIT;
		}
		break;
 8001106:	e010      	b.n	800112a <fsm_input_driven_config+0x1c2>
			SCH_DeleteTask(timeCountDownFast);
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <fsm_input_driven_config+0x1f0>)
 800110a:	f7ff f9c9 	bl	80004a0 <SCH_DeleteTask>
			resetButtonFlag();
 800110e:	f000 fb13 	bl	8001738 <resetButtonFlag>
			Cmode = WAIT;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <fsm_input_driven_config+0x1cc>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
		break;
 8001118:	e007      	b.n	800112a <fsm_input_driven_config+0x1c2>
	default:
		Cmode = WAIT;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <fsm_input_driven_config+0x1cc>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
		break;
 8001120:	e004      	b.n	800112c <fsm_input_driven_config+0x1c4>
		break;
 8001122:	bf00      	nop
 8001124:	e002      	b.n	800112c <fsm_input_driven_config+0x1c4>
		break;
 8001126:	bf00      	nop
 8001128:	e000      	b.n	800112c <fsm_input_driven_config+0x1c4>
		break;
 800112a:	bf00      	nop
	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000d5 	.word	0x200000d5
 8001138:	20000130 	.word	0x20000130
 800113c:	20000124 	.word	0x20000124
 8001140:	2000002b 	.word	0x2000002b
 8001144:	20000110 	.word	0x20000110
 8001148:	20000160 	.word	0x20000160
 800114c:	20000118 	.word	0x20000118
 8001150:	20000120 	.word	0x20000120
 8001154:	08000195 	.word	0x08000195
 8001158:	080001c5 	.word	0x080001c5

0800115c <flushLed>:
		HAL_GPIO_TogglePin(LED1_G_GPIO_Port, LED1_G_Pin);
		break;
	}
}

void flushLed(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2101      	movs	r1, #1
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <flushLed+0x44>)
 8001166:	f001 f95a 	bl	800241e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2108      	movs	r1, #8
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <flushLed+0x44>)
 8001170:	f001 f955 	bl	800241e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2102      	movs	r1, #2
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <flushLed+0x44>)
 800117a:	f001 f950 	bl	800241e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <flushLed+0x44>)
 8001184:	f001 f94b 	bl	800241e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2104      	movs	r1, #4
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <flushLed+0x44>)
 800118e:	f001 f946 	bl	800241e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2120      	movs	r1, #32
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <flushLed+0x44>)
 8001198:	f001 f941 	bl	800241e <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011a8:	f3bf 8f4f 	dsb	sy
}
 80011ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SystemReset+0x24>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011b6:	4904      	ldr	r1, [pc, #16]	; (80011c8 <__NVIC_SystemReset+0x24>)
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_SystemReset+0x28>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <__NVIC_SystemReset+0x20>
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0004 	.word	0x05fa0004

080011d0 <fsm_run>:

uint8_t fsm_run_StateChange = 1;
extern uint8_t fsm_input_driven_normal_StateChange;
ledColor* color;

void fsm_run(machine_state mode){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	if(flagForButtonHold[0] == 1){
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <fsm_run+0x1f0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <fsm_run+0x18>
		m_mode = modeReset;
 80011e2:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <fsm_run+0x1f4>)
 80011e4:	2204      	movs	r2, #4
 80011e6:	701a      	strb	r2, [r3, #0]
	}
	switch(mode){
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	f200 80d8 	bhi.w	80013a0 <fsm_run+0x1d0>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <fsm_run+0x28>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	0800125b 	.word	0x0800125b
 8001200:	080012cd 	.word	0x080012cd
 8001204:	08001337 	.word	0x08001337
	case mode1:// run normally
		if(flagForButtonPress[0] == 1){
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <fsm_run+0x1f8>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10b      	bne.n	8001228 <fsm_run+0x58>
			fsm_run_StateChange = 1;
 8001210:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <fsm_run+0x1fc>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(timeCountDown);
 8001216:	486e      	ldr	r0, [pc, #440]	; (80013d0 <fsm_run+0x200>)
 8001218:	f7ff f942 	bl	80004a0 <SCH_DeleteTask>
			m_mode = mode2;
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <fsm_run+0x1f4>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8001222:	f000 fa89 	bl	8001738 <resetButtonFlag>
				fsm_input_driven_normal_StateChange = 1;
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_normal();
		}
		break;
 8001226:	e0c6      	b.n	80013b6 <fsm_run+0x1e6>
			if(fsm_run_StateChange){
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <fsm_run+0x1fc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <fsm_run+0x84>
				t_mode_main = RED;
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <fsm_run+0x204>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
				t_mode_side = YELLOW;
 8001236:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <fsm_run+0x208>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
				main_traffic.count_down = 0;
 800123c:	4b67      	ldr	r3, [pc, #412]	; (80013dc <fsm_run+0x20c>)
 800123e:	2200      	movs	r2, #0
 8001240:	705a      	strb	r2, [r3, #1]
				side_traffic.count_down = 0;
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <fsm_run+0x210>)
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]
				fsm_input_driven_normal_StateChange = 1;
 8001248:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <fsm_run+0x214>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
				fsm_run_StateChange = 0;
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <fsm_run+0x1fc>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_normal();
 8001254:	f7ff fd9c 	bl	8000d90 <fsm_input_driven_normal>
		break;
 8001258:	e0ad      	b.n	80013b6 <fsm_run+0x1e6>

	case mode2:
		if(flagForButtonPress[0] == 1){
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <fsm_run+0x1f8>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10b      	bne.n	800127a <fsm_run+0xaa>
			fsm_run_StateChange = 1;
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <fsm_run+0x1fc>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(toggleLedColor);
 8001268:	485f      	ldr	r0, [pc, #380]	; (80013e8 <fsm_run+0x218>)
 800126a:	f7ff f919 	bl	80004a0 <SCH_DeleteTask>
			m_mode = mode3;
 800126e:	4b55      	ldr	r3, [pc, #340]	; (80013c4 <fsm_run+0x1f4>)
 8001270:	2202      	movs	r2, #2
 8001272:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8001274:	f000 fa60 	bl	8001738 <resetButtonFlag>
				update7SEG(counter);
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_config(&main_traffic.red, &side_traffic.green);
		}
		break;
 8001278:	e09d      	b.n	80013b6 <fsm_run+0x1e6>
			if(fsm_run_StateChange){
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <fsm_run+0x1fc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01f      	beq.n	80012c2 <fsm_run+0xf2>
				flushLed();
 8001282:	f7ff ff6b 	bl	800115c <flushLed>
				*color = lRED;
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <fsm_run+0x21c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
				TaskPara.para1 = (void*)color;
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <fsm_run+0x21c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <fsm_run+0x220>)
 8001294:	6013      	str	r3, [r2, #0]
				SCH_AddTask(toggleLedColor, 50, 50);
 8001296:	2232      	movs	r2, #50	; 0x32
 8001298:	2132      	movs	r1, #50	; 0x32
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <fsm_run+0x218>)
 800129c:	f7ff f858 	bl	8000350 <SCH_AddTask>
				HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	4854      	ldr	r0, [pc, #336]	; (80013f4 <fsm_run+0x224>)
 80012a4:	f001 f8d3 	bl	800244e <HAL_GPIO_TogglePin>
				led_counter[0] = main_traffic.red;
 80012a8:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <fsm_run+0x20c>)
 80012aa:	789a      	ldrb	r2, [r3, #2]
 80012ac:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <fsm_run+0x228>)
 80012ae:	701a      	strb	r2, [r3, #0]
				led_counter[1] = 2;
 80012b0:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <fsm_run+0x228>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	705a      	strb	r2, [r3, #1]
				update7SEG(counter);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff f9fe 	bl	80006b8 <update7SEG>
				fsm_run_StateChange = 0;
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <fsm_run+0x1fc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_config(&main_traffic.red, &side_traffic.green);
 80012c2:	494e      	ldr	r1, [pc, #312]	; (80013fc <fsm_run+0x22c>)
 80012c4:	484e      	ldr	r0, [pc, #312]	; (8001400 <fsm_run+0x230>)
 80012c6:	f7ff fe4f 	bl	8000f68 <fsm_input_driven_config>
		break;
 80012ca:	e074      	b.n	80013b6 <fsm_run+0x1e6>

	case mode3:
		if(flagForButtonPress[0] == 1){
 80012cc:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <fsm_run+0x1f8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d10b      	bne.n	80012ec <fsm_run+0x11c>
			fsm_run_StateChange = 1;
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <fsm_run+0x1fc>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(toggleLedColor);
 80012da:	4843      	ldr	r0, [pc, #268]	; (80013e8 <fsm_run+0x218>)
 80012dc:	f7ff f8e0 	bl	80004a0 <SCH_DeleteTask>
			m_mode = mode4;
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <fsm_run+0x1f4>)
 80012e2:	2203      	movs	r2, #3
 80012e4:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 80012e6:	f000 fa27 	bl	8001738 <resetButtonFlag>
				update7SEG(counter);
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_config(&main_traffic.yellow, &side_traffic.red);
		}
		break;
 80012ea:	e064      	b.n	80013b6 <fsm_run+0x1e6>
			if(fsm_run_StateChange){
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <fsm_run+0x1fc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01b      	beq.n	800132c <fsm_run+0x15c>
				flushLed();
 80012f4:	f7ff ff32 	bl	800115c <flushLed>
				*color = lYELLOW;
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <fsm_run+0x21c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
				TaskPara.para1 = (void*)color;
 8001300:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <fsm_run+0x21c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a3a      	ldr	r2, [pc, #232]	; (80013f0 <fsm_run+0x220>)
 8001306:	6013      	str	r3, [r2, #0]
				SCH_AddTask(toggleLedColor, 50, 50);
 8001308:	2232      	movs	r2, #50	; 0x32
 800130a:	2132      	movs	r1, #50	; 0x32
 800130c:	4836      	ldr	r0, [pc, #216]	; (80013e8 <fsm_run+0x218>)
 800130e:	f7ff f81f 	bl	8000350 <SCH_AddTask>
				led_counter[0] = main_traffic.yellow;
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <fsm_run+0x20c>)
 8001314:	78da      	ldrb	r2, [r3, #3]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <fsm_run+0x228>)
 8001318:	701a      	strb	r2, [r3, #0]
				led_counter[1] = 3;
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <fsm_run+0x228>)
 800131c:	2203      	movs	r2, #3
 800131e:	705a      	strb	r2, [r3, #1]
				update7SEG(counter);
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff f9c9 	bl	80006b8 <update7SEG>
				fsm_run_StateChange = 0;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <fsm_run+0x1fc>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_config(&main_traffic.yellow, &side_traffic.red);
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <fsm_run+0x234>)
 800132e:	4836      	ldr	r0, [pc, #216]	; (8001408 <fsm_run+0x238>)
 8001330:	f7ff fe1a 	bl	8000f68 <fsm_input_driven_config>
		break;
 8001334:	e03f      	b.n	80013b6 <fsm_run+0x1e6>

	case mode4:
		if(flagForButtonPress[0] == 1){
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <fsm_run+0x1f8>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10b      	bne.n	8001356 <fsm_run+0x186>
			fsm_run_StateChange = 1;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <fsm_run+0x1fc>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
			SCH_DeleteTask(toggleLedColor);
 8001344:	4828      	ldr	r0, [pc, #160]	; (80013e8 <fsm_run+0x218>)
 8001346:	f7ff f8ab 	bl	80004a0 <SCH_DeleteTask>
			m_mode = mode1;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <fsm_run+0x1f4>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
			resetButtonFlag();
 8001350:	f000 f9f2 	bl	8001738 <resetButtonFlag>
				update7SEG(counter);
				fsm_run_StateChange = 0;
			}
			fsm_input_driven_config(&main_traffic.green, &side_traffic.red);
		}
		break;
 8001354:	e02f      	b.n	80013b6 <fsm_run+0x1e6>
			if(fsm_run_StateChange){
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <fsm_run+0x1fc>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01b      	beq.n	8001396 <fsm_run+0x1c6>
				flushLed();
 800135e:	f7ff fefd 	bl	800115c <flushLed>
				*color = lGREEN;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <fsm_run+0x21c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2202      	movs	r2, #2
 8001368:	701a      	strb	r2, [r3, #0]
				TaskPara.para1 = (void*)color;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <fsm_run+0x21c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <fsm_run+0x220>)
 8001370:	6013      	str	r3, [r2, #0]
				SCH_AddTask(toggleLedColor, 50, 50);
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	2132      	movs	r1, #50	; 0x32
 8001376:	481c      	ldr	r0, [pc, #112]	; (80013e8 <fsm_run+0x218>)
 8001378:	f7fe ffea 	bl	8000350 <SCH_AddTask>
				led_counter[0] = main_traffic.green;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <fsm_run+0x20c>)
 800137e:	791a      	ldrb	r2, [r3, #4]
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <fsm_run+0x228>)
 8001382:	701a      	strb	r2, [r3, #0]
				led_counter[1] = 4;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <fsm_run+0x228>)
 8001386:	2204      	movs	r2, #4
 8001388:	705a      	strb	r2, [r3, #1]
				update7SEG(counter);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff f994 	bl	80006b8 <update7SEG>
				fsm_run_StateChange = 0;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <fsm_run+0x1fc>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
			fsm_input_driven_config(&main_traffic.green, &side_traffic.red);
 8001396:	491b      	ldr	r1, [pc, #108]	; (8001404 <fsm_run+0x234>)
 8001398:	481c      	ldr	r0, [pc, #112]	; (800140c <fsm_run+0x23c>)
 800139a:	f7ff fde5 	bl	8000f68 <fsm_input_driven_config>
		break;
 800139e:	e00a      	b.n	80013b6 <fsm_run+0x1e6>

	default:// modeReset
		if(BUTTON[0] != HOLD){
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <fsm_run+0x240>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d001      	beq.n	80013ac <fsm_run+0x1dc>
			NVIC_SystemReset();
 80013a8:	f7ff fefc 	bl	80011a4 <__NVIC_SystemReset>
		}
		HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <fsm_run+0x224>)
 80013b0:	f001 f84d 	bl	800244e <HAL_GPIO_TogglePin>
		break;
 80013b4:	bf00      	nop
	}
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000124 	.word	0x20000124
 80013c4:	200000e1 	.word	0x200000e1
 80013c8:	20000130 	.word	0x20000130
 80013cc:	2000002c 	.word	0x2000002c
 80013d0:	08000165 	.word	0x08000165
 80013d4:	20000104 	.word	0x20000104
 80013d8:	20000048 	.word	0x20000048
 80013dc:	20000030 	.word	0x20000030
 80013e0:	20000038 	.word	0x20000038
 80013e4:	2000002a 	.word	0x2000002a
 80013e8:	08000221 	.word	0x08000221
 80013ec:	20000174 	.word	0x20000174
 80013f0:	20000164 	.word	0x20000164
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	20000118 	.word	0x20000118
 80013fc:	2000003c 	.word	0x2000003c
 8001400:	20000032 	.word	0x20000032
 8001404:	2000003a 	.word	0x2000003a
 8001408:	20000033 	.word	0x20000033
 800140c:	20000034 	.word	0x20000034
 8001410:	20000120 	.word	0x20000120

08001414 <p_clockSet>:
#include "global.h"

#ifdef P_CLOCK
  int p_flag = 0;
  int p_dur  = 0;
  void p_clockSet(int dur){
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	  p_flag = 0;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <p_clockSet+0x2c>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	  p_dur = dur / 10;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <p_clockSet+0x30>)
 8001426:	fb82 1203 	smull	r1, r2, r2, r3
 800142a:	1092      	asrs	r2, r2, #2
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <p_clockSet+0x34>)
 8001432:	6013      	str	r3, [r2, #0]

  }
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200000d8 	.word	0x200000d8
 8001444:	66666667 	.word	0x66666667
 8001448:	200000dc 	.word	0x200000dc

0800144c <p_clockRun>:
  void p_clockRun(){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	  p_dur--;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <p_clockRun+0x24>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <p_clockRun+0x24>)
 8001458:	6013      	str	r3, [r2, #0]
	  if(p_dur == 0) p_flag = 1;
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <p_clockRun+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <p_clockRun+0x1c>
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <p_clockRun+0x28>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
  }
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	200000dc 	.word	0x200000dc
 8001474:	200000d8 	.word	0x200000d8

08001478 <button_pin_read>:
static uint16_t counterForButtonHold[NUMBER_OF_BUTTONS];
static uint16_t counterForButtonRelease[NUMBER_OF_BUTTONS];
//check initial press
static uint8_t initial_press[NUMBER_OF_BUTTONS];

GPIO_PinState button_pin_read(uint8_t index){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d012      	beq.n	80014ae <button_pin_read+0x36>
 8001488:	2b02      	cmp	r3, #2
 800148a:	dc16      	bgt.n	80014ba <button_pin_read+0x42>
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <button_pin_read+0x1e>
 8001490:	2b01      	cmp	r3, #1
 8001492:	d006      	beq.n	80014a2 <button_pin_read+0x2a>
		break;
	case 2:
		return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
		break;
	default:
		break;
 8001494:	e011      	b.n	80014ba <button_pin_read+0x42>
		return HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8001496:	2101      	movs	r1, #1
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <button_pin_read+0x50>)
 800149a:	f000 ffa9 	bl	80023f0 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	e00d      	b.n	80014be <button_pin_read+0x46>
		return HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80014a2:	2102      	movs	r1, #2
 80014a4:	4808      	ldr	r0, [pc, #32]	; (80014c8 <button_pin_read+0x50>)
 80014a6:	f000 ffa3 	bl	80023f0 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	e007      	b.n	80014be <button_pin_read+0x46>
		return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80014ae:	2104      	movs	r1, #4
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <button_pin_read+0x50>)
 80014b2:	f000 ff9d 	bl	80023f0 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	e001      	b.n	80014be <button_pin_read+0x46>
		break;
 80014ba:	bf00      	nop
	}
	return SET;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010800 	.word	0x40010800

080014cc <button_reading>:

void button_reading(){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80014d2:	2300      	movs	r3, #0
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	e10e      	b.n	80016f6 <button_reading+0x22a>
    	//DEBOUNCE
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	498a      	ldr	r1, [pc, #552]	; (8001708 <button_reading+0x23c>)
 80014de:	5c89      	ldrb	r1, [r1, r2]
 80014e0:	4a8a      	ldr	r2, [pc, #552]	; (800170c <button_reading+0x240>)
 80014e2:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = button_pin_read(i);
 80014e4:	79fc      	ldrb	r4, [r7, #7]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ffc5 	bl	8001478 <button_pin_read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b85      	ldr	r3, [pc, #532]	; (8001708 <button_reading+0x23c>)
 80014f4:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4a83      	ldr	r2, [pc, #524]	; (8001708 <button_reading+0x23c>)
 80014fa:	5cd2      	ldrb	r2, [r2, r3]
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4983      	ldr	r1, [pc, #524]	; (800170c <button_reading+0x240>)
 8001500:	5ccb      	ldrb	r3, [r1, r3]
 8001502:	429a      	cmp	r2, r3
 8001504:	d105      	bne.n	8001512 <button_reading+0x46>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	497f      	ldr	r1, [pc, #508]	; (8001708 <button_reading+0x23c>)
 800150c:	5c89      	ldrb	r1, [r1, r2]
 800150e:	4a80      	ldr	r2, [pc, #512]	; (8001710 <button_reading+0x244>)
 8001510:	54d1      	strb	r1, [r2, r3]

        // UPDATE COUNTER
        if(buttonBuffer[i] == BUTTON_IS_RELEASED){
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a7e      	ldr	r2, [pc, #504]	; (8001710 <button_reading+0x244>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d138      	bne.n	800158e <button_reading+0xc2>
        	if(initial_press[i] == 5) initial_press[i] = 0;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a7d      	ldr	r2, [pc, #500]	; (8001714 <button_reading+0x248>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d103      	bne.n	800152e <button_reading+0x62>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4a7a      	ldr	r2, [pc, #488]	; (8001714 <button_reading+0x248>)
 800152a:	2100      	movs	r1, #0
 800152c:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 6) initial_press[i] = 0;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a78      	ldr	r2, [pc, #480]	; (8001714 <button_reading+0x248>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	2b06      	cmp	r3, #6
 8001536:	d103      	bne.n	8001540 <button_reading+0x74>
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4a76      	ldr	r2, [pc, #472]	; (8001714 <button_reading+0x248>)
 800153c:	2100      	movs	r1, #0
 800153e:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 1) initial_press[i] = 2;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4a74      	ldr	r2, [pc, #464]	; (8001714 <button_reading+0x248>)
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d103      	bne.n	8001552 <button_reading+0x86>
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4a71      	ldr	r2, [pc, #452]	; (8001714 <button_reading+0x248>)
 800154e:	2102      	movs	r1, #2
 8001550:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 3) initial_press[i] = 4;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4a6f      	ldr	r2, [pc, #444]	; (8001714 <button_reading+0x248>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d103      	bne.n	8001564 <button_reading+0x98>
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4a6d      	ldr	r2, [pc, #436]	; (8001714 <button_reading+0x248>)
 8001560:	2104      	movs	r1, #4
 8001562:	54d1      	strb	r1, [r2, r3]

           	counterForButtonHold[i] = 0;
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4a6c      	ldr	r2, [pc, #432]	; (8001718 <button_reading+0x24c>)
 8001568:	2100      	movs	r1, #0
 800156a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
           	if(counterForButtonRelease[i] < RELEASE_TIME) counterForButtonRelease[i]++;
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <button_reading+0x250>)
 8001572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001576:	2b13      	cmp	r3, #19
 8001578:	d834      	bhi.n	80015e4 <button_reading+0x118>
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4a67      	ldr	r2, [pc, #412]	; (800171c <button_reading+0x250>)
 800157e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001582:	3201      	adds	r2, #1
 8001584:	b291      	uxth	r1, r2
 8001586:	4a65      	ldr	r2, [pc, #404]	; (800171c <button_reading+0x250>)
 8001588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800158c:	e02a      	b.n	80015e4 <button_reading+0x118>
         }
        else if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4a5f      	ldr	r2, [pc, #380]	; (8001710 <button_reading+0x244>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d125      	bne.n	80015e4 <button_reading+0x118>
        	if(initial_press[i] == 0) initial_press[i] = 1;
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <button_reading+0x248>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <button_reading+0xde>
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <button_reading+0x248>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	54d1      	strb	r1, [r2, r3]
        	if(initial_press[i] == 2) initial_press[i] = 3;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4a59      	ldr	r2, [pc, #356]	; (8001714 <button_reading+0x248>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d103      	bne.n	80015bc <button_reading+0xf0>
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4a57      	ldr	r2, [pc, #348]	; (8001714 <button_reading+0x248>)
 80015b8:	2103      	movs	r1, #3
 80015ba:	54d1      	strb	r1, [r2, r3]

        	counterForButtonRelease[i] = 0;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	4a57      	ldr	r2, [pc, #348]	; (800171c <button_reading+0x250>)
 80015c0:	2100      	movs	r1, #0
 80015c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	if(counterForButtonHold[i] < HOLD_TIME) counterForButtonHold[i]++;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4a53      	ldr	r2, [pc, #332]	; (8001718 <button_reading+0x24c>)
 80015ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ce:	2b63      	cmp	r3, #99	; 0x63
 80015d0:	d808      	bhi.n	80015e4 <button_reading+0x118>
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <button_reading+0x24c>)
 80015d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015da:	3201      	adds	r2, #1
 80015dc:	b291      	uxth	r1, r2
 80015de:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <button_reading+0x24c>)
 80015e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }

        //REGCONIZE
        if(initial_press[i] == 0){	// IDLE
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4a4b      	ldr	r2, [pc, #300]	; (8001714 <button_reading+0x248>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <button_reading+0x12a>
        	BUTTON[i] = IDLE;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <button_reading+0x254>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	54d1      	strb	r1, [r2, r3]
        }
        if(initial_press[i] == 1 || initial_press[i] == 5){	// HOLD
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <button_reading+0x248>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d004      	beq.n	800160a <button_reading+0x13e>
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4a44      	ldr	r2, [pc, #272]	; (8001714 <button_reading+0x248>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d111      	bne.n	800162e <button_reading+0x162>
        	if(counterForButtonHold[i] >= HOLD_TIME){
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <button_reading+0x24c>)
 800160e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001612:	2b63      	cmp	r3, #99	; 0x63
 8001614:	d90b      	bls.n	800162e <button_reading+0x162>
        		flagForButtonHold[i] = 1;
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <button_reading+0x258>)
 800161a:	2101      	movs	r1, #1
 800161c:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = HOLD;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4a3f      	ldr	r2, [pc, #252]	; (8001720 <button_reading+0x254>)
 8001622:	2102      	movs	r1, #2
 8001624:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 5;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <button_reading+0x248>)
 800162a:	2105      	movs	r1, #5
 800162c:	54d1      	strb	r1, [r2, r3]
        	}
        }
        if(initial_press[i] == 2){
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <button_reading+0x248>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d111      	bne.n	800165c <button_reading+0x190>
        	if(counterForButtonRelease[i] >= RELEASE_TIME){	// PRESS
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4a38      	ldr	r2, [pc, #224]	; (800171c <button_reading+0x250>)
 800163c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001640:	2b13      	cmp	r3, #19
 8001642:	d90b      	bls.n	800165c <button_reading+0x190>
        		flagForButtonPress[i] = 1;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4a38      	ldr	r2, [pc, #224]	; (8001728 <button_reading+0x25c>)
 8001648:	2101      	movs	r1, #1
 800164a:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = PRESS;
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4a34      	ldr	r2, [pc, #208]	; (8001720 <button_reading+0x254>)
 8001650:	2101      	movs	r1, #1
 8001652:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 0;
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <button_reading+0x248>)
 8001658:	2100      	movs	r1, #0
 800165a:	54d1      	strb	r1, [r2, r3]
        	}
        }
        if(initial_press[i] == 3 || initial_press[i] == 6){	// TAP HOLD
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <button_reading+0x248>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d004      	beq.n	8001670 <button_reading+0x1a4>
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <button_reading+0x248>)
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d111      	bne.n	8001694 <button_reading+0x1c8>
        	if(counterForButtonHold[i] >= HOLD_TIME){
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <button_reading+0x24c>)
 8001674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001678:	2b63      	cmp	r3, #99	; 0x63
 800167a:	d90b      	bls.n	8001694 <button_reading+0x1c8>
        		flagForButtonTapHold[i] = 1;
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4a2b      	ldr	r2, [pc, #172]	; (800172c <button_reading+0x260>)
 8001680:	2101      	movs	r1, #1
 8001682:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = TAP_HOLD;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <button_reading+0x254>)
 8001688:	2104      	movs	r1, #4
 800168a:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 6;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4a21      	ldr	r2, [pc, #132]	; (8001714 <button_reading+0x248>)
 8001690:	2106      	movs	r1, #6
 8001692:	54d1      	strb	r1, [r2, r3]
        	}
        }
        if(initial_press[i] == 4){
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <button_reading+0x248>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d111      	bne.n	80016c2 <button_reading+0x1f6>
        	if(counterForButtonRelease[i] >= RELEASE_TIME){	// DOUBLE TAP
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4a1e      	ldr	r2, [pc, #120]	; (800171c <button_reading+0x250>)
 80016a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a6:	2b13      	cmp	r3, #19
 80016a8:	d90b      	bls.n	80016c2 <button_reading+0x1f6>
        		flagForButtonDoubleTap[i] = 1;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <button_reading+0x264>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	54d1      	strb	r1, [r2, r3]
        		BUTTON[i] = DOUBLE_TAP;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <button_reading+0x254>)
 80016b6:	2103      	movs	r1, #3
 80016b8:	54d1      	strb	r1, [r2, r3]
        		initial_press[i] = 0;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a15      	ldr	r2, [pc, #84]	; (8001714 <button_reading+0x248>)
 80016be:	2100      	movs	r1, #0
 80016c0:	54d1      	strb	r1, [r2, r3]
        	}
        }

#ifdef UNIT_TEST
        if(i == 0) test_button = 0;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <button_reading+0x202>
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <button_reading+0x268>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
        test_button = test_button | !buttonBuffer[i];
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <button_reading+0x244>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <button_reading+0x268>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <button_reading+0x268>)
 80016ee:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3301      	adds	r3, #1
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	f67f aeed 	bls.w	80014d8 <button_reading+0xc>
#endif
    }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	200000e4 	.word	0x200000e4
 800170c:	200000e8 	.word	0x200000e8
 8001710:	20000040 	.word	0x20000040
 8001714:	200000fc 	.word	0x200000fc
 8001718:	200000ec 	.word	0x200000ec
 800171c:	200000f4 	.word	0x200000f4
 8001720:	20000120 	.word	0x20000120
 8001724:	20000124 	.word	0x20000124
 8001728:	20000130 	.word	0x20000130
 800172c:	20000160 	.word	0x20000160
 8001730:	20000110 	.word	0x20000110
 8001734:	200000e2 	.word	0x200000e2

08001738 <resetButtonFlag>:
//		flagForButtonDoubleTap[i] = 0;
//		flagForButtonTapHold[i] = 0;
//	}
//}

void resetButtonFlag(){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
    memset(flagForButtonPress, 0, sizeof(flagForButtonPress));
 800173c:	2203      	movs	r2, #3
 800173e:	2100      	movs	r1, #0
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <resetButtonFlag+0x30>)
 8001742:	f001 fee3 	bl	800350c <memset>
    memset(flagForButtonHold, 0, sizeof(flagForButtonHold));
 8001746:	2203      	movs	r2, #3
 8001748:	2100      	movs	r1, #0
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <resetButtonFlag+0x34>)
 800174c:	f001 fede 	bl	800350c <memset>
    memset(flagForButtonDoubleTap, 0, sizeof(flagForButtonDoubleTap));
 8001750:	2203      	movs	r2, #3
 8001752:	2100      	movs	r1, #0
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <resetButtonFlag+0x38>)
 8001756:	f001 fed9 	bl	800350c <memset>
    memset(flagForButtonTapHold, 0, sizeof(flagForButtonTapHold));
 800175a:	2203      	movs	r2, #3
 800175c:	2100      	movs	r1, #0
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <resetButtonFlag+0x3c>)
 8001760:	f001 fed4 	bl	800350c <memset>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000130 	.word	0x20000130
 800176c:	20000124 	.word	0x20000124
 8001770:	20000110 	.word	0x20000110
 8001774:	20000160 	.word	0x20000160

08001778 <unit_test_button_press>:
//    if (index >= NUMBER_OF_BUTTONS)
//        return 0;
//    return (flagForButtonTapHold[index] == 1);
//}
#ifdef UNIT_TEST
void unit_test_button_press(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	if(test_button == 1) HAL_GPIO_WritePin(TEST_Button_GPIO_Port, TEST_Button_Pin, RESET);
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <unit_test_button_press+0x30>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <unit_test_button_press+0x18>
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <unit_test_button_press+0x34>)
 800178c:	f000 fe47 	bl	800241e <HAL_GPIO_WritePin>
	if(test_button == 0) HAL_GPIO_WritePin(TEST_Button_GPIO_Port, TEST_Button_Pin, SET);
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <unit_test_button_press+0x30>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <unit_test_button_press+0x2c>
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <unit_test_button_press+0x34>)
 80017a0:	f000 fe3d 	bl	800241e <HAL_GPIO_WritePin>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200000e2 	.word	0x200000e2
 80017ac:	40010800 	.word	0x40010800

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b4:	f000 fb32 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 f848 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f000 f8ec 	bl	8001998 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017c0:	f000 f89e 	bl	8001900 <MX_TIM2_Init>
  MX_IWDG_Init();
 80017c4:	f000 f882 	bl	80018cc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
#ifdef P_CLOCK
  p_clockSet(200);
 80017c8:	20c8      	movs	r0, #200	; 0xc8
 80017ca:	f7ff fe23 	bl	8001414 <p_clockSet>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(timerP_GPIO_Port, timerP_Pin, SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2140      	movs	r1, #64	; 0x40
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <main+0x84>)
 80017d4:	f000 fe23 	bl	800241e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TEST_Timer_GPIO_Port, TEST_Timer_Pin, SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017de:	4816      	ldr	r0, [pc, #88]	; (8001838 <main+0x88>)
 80017e0:	f000 fe1d 	bl	800241e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	4812      	ldr	r0, [pc, #72]	; (8001834 <main+0x84>)
 80017ea:	f000 fe18 	bl	800241e <HAL_GPIO_WritePin>
  SCH_Init();
 80017ee:	f7fe fd4b 	bl	8000288 <SCH_Init>
  SCH_AddTask(LedBlinky, 20, 100);
 80017f2:	2264      	movs	r2, #100	; 0x64
 80017f4:	2114      	movs	r1, #20
 80017f6:	4811      	ldr	r0, [pc, #68]	; (800183c <main+0x8c>)
 80017f8:	f7fe fdaa 	bl	8000350 <SCH_AddTask>
  SCH_AddTask(display7segment, 30, 20);
 80017fc:	2214      	movs	r2, #20
 80017fe:	211e      	movs	r1, #30
 8001800:	480f      	ldr	r0, [pc, #60]	; (8001840 <main+0x90>)
 8001802:	f7fe fda5 	bl	8000350 <SCH_AddTask>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef P_CLOCK
	  if(p_flag == 1){
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <main+0x94>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <main+0x6e>
		  HAL_GPIO_TogglePin(timerP_GPIO_Port, timerP_Pin);
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <main+0x84>)
 8001812:	f000 fe1c 	bl	800244e <HAL_GPIO_TogglePin>
		  p_clockSet(1000);
 8001816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181a:	f7ff fdfb 	bl	8001414 <p_clockSet>
	  }
#endif
//	  UNIT TEST
//	  unit_test_7seg();
	  unit_test_button_press();
 800181e:	f7ff ffab 	bl	8001778 <unit_test_button_press>
//	  unit_test_button_read();
//	  SCH
	  SCH_Dispatch();
 8001822:	f7fe fe05 	bl	8000430 <SCH_Dispatch>
//	   FSM
	  fsm_run(m_mode);
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <main+0x98>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fccf 	bl	80011d0 <fsm_run>
	  if(p_flag == 1){
 8001832:	e7e8      	b.n	8001806 <main+0x56>
 8001834:	40010c00 	.word	0x40010c00
 8001838:	40010800 	.word	0x40010800
 800183c:	0800014d 	.word	0x0800014d
 8001840:	080001f5 	.word	0x080001f5
 8001844:	200000d8 	.word	0x200000d8
 8001848:	200000e1 	.word	0x200000e1

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2228      	movs	r2, #40	; 0x28
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fe56 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800186e:	230a      	movs	r3, #10
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	2301      	movs	r3, #1
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	2310      	movs	r3, #16
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fe4e 	bl	8002528 <HAL_RCC_OscConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8001892:	f000 f8e1 	bl	8001a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001896:	230f      	movs	r3, #15
 8001898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 f8b8 	bl	8002a28 <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80018be:	f000 f8cb 	bl	8001a58 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3740      	adds	r7, #64	; 0x40
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_IWDG_Init+0x2c>)
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <MX_IWDG_Init+0x30>)
 80018d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_IWDG_Init+0x2c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1499;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_IWDG_Init+0x2c>)
 80018de:	f240 52db 	movw	r2, #1499	; 0x5db
 80018e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_IWDG_Init+0x2c>)
 80018e6:	f000 fdcb 	bl	8002480 <HAL_IWDG_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80018f0:	f000 f8b2 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000178 	.word	0x20000178
 80018fc:	40003000 	.word	0x40003000

08001900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_TIM2_Init+0x94>)
 800191e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_TIM2_Init+0x94>)
 8001926:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800192a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_TIM2_Init+0x94>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_TIM2_Init+0x94>)
 8001934:	2209      	movs	r2, #9
 8001936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_TIM2_Init+0x94>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM2_Init+0x94>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_TIM2_Init+0x94>)
 8001946:	f001 f9cb 	bl	8002ce0 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001950:	f000 f882 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM2_Init+0x94>)
 8001962:	f001 fb49 	bl	8002ff8 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800196c:	f000 f874 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM2_Init+0x94>)
 800197e:	f001 fd21 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001988:	f000 f866 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000184 	.word	0x20000184

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80019dc:	2200      	movs	r2, #0
 80019de:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80019e2:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_GPIO_Init+0xb8>)
 80019e4:	f000 fd1b 	bl	800241e <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|TEST_Timer_Pin
                          |TEST_Button_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_R_Pin|LED0_Y_Pin|LED0_G_Pin|LED1_R_Pin
 80019e8:	2200      	movs	r2, #0
 80019ea:	21ff      	movs	r1, #255	; 0xff
 80019ec:	4819      	ldr	r0, [pc, #100]	; (8001a54 <MX_GPIO_Init+0xbc>)
 80019ee:	f000 fd16 	bl	800241e <HAL_GPIO_WritePin>
                          |LED1_Y_Pin|LED1_G_Pin|timerP_Pin|TEST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80019f2:	2307      	movs	r3, #7
 80019f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <MX_GPIO_Init+0xb8>)
 8001a06:	f000 fb79 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin TEST_Timer_Pin
                           TEST_Button_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001a0a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001a0e:	60bb      	str	r3, [r7, #8]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|TEST_Timer_Pin
                          |TEST_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4619      	mov	r1, r3
 8001a22:	480b      	ldr	r0, [pc, #44]	; (8001a50 <MX_GPIO_Init+0xb8>)
 8001a24:	f000 fb6a 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_R_Pin LED0_Y_Pin LED0_G_Pin LED1_R_Pin
                           LED1_Y_Pin LED1_G_Pin timerP_Pin TEST_Pin */
  GPIO_InitStruct.Pin = LED0_R_Pin|LED0_Y_Pin|LED0_G_Pin|LED1_R_Pin
 8001a28:	23ff      	movs	r3, #255	; 0xff
 8001a2a:	60bb      	str	r3, [r7, #8]
                          |LED1_Y_Pin|LED1_G_Pin|timerP_Pin|TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2302      	movs	r3, #2
 8001a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_GPIO_Init+0xbc>)
 8001a40:	f000 fb5c 	bl	80020fc <HAL_GPIO_Init>

}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	40010c00 	.word	0x40010c00

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_MspInit+0x60>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_MspInit+0x60>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d113      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	201c      	movs	r0, #28
 8001af8:	f000 fac9 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001afc:	201c      	movs	r0, #28
 8001afe:	f000 fae2 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x4>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b56:	f000 f9a7 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM2_IRQHandler+0x10>)
 8001b66:	f001 f957 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000184 	.word	0x20000184

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f001 fc78 	bl	8003498 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20002800 	.word	0x20002800
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	20000100 	.word	0x20000100
 8001bdc:	200001e0 	.word	0x200001e0

08001be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <fsm_traffic>:
#include "display7seg.h"

traffic_mode	t_mode_main = RED,
				t_mode_side = YELLOW;

void fsm_traffic(traffic_mode* mode, traffic_way* Tway){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	switch(*mode){
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d02e      	beq.n	8001c5c <fsm_traffic+0x70>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	dc40      	bgt.n	8001c84 <fsm_traffic+0x98>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <fsm_traffic+0x20>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d014      	beq.n	8001c34 <fsm_traffic+0x48>
 8001c0a:	e03b      	b.n	8001c84 <fsm_traffic+0x98>
	case RED:
		if(Tway->count_down == 0){
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d144      	bne.n	8001c9e <fsm_traffic+0xb2>
			*mode = GREEN;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	701a      	strb	r2, [r3, #0]
			lit_green(Tway->way);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f8a6 	bl	8001d70 <lit_green>
			Tway->count_down = Tway->green;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	791a      	ldrb	r2, [r3, #4]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	705a      	strb	r2, [r3, #1]
			update7SEG(traffic);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7fe fd43 	bl	80006b8 <update7SEG>
		}
		break;
 8001c32:	e034      	b.n	8001c9e <fsm_traffic+0xb2>
	case YELLOW:
		if(Tway->count_down == 0){
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d132      	bne.n	8001ca2 <fsm_traffic+0xb6>
			*mode = RED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
			lit_red(Tway->way);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f832 	bl	8001cb0 <lit_red>
			Tway->count_down = Tway->red;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	789a      	ldrb	r2, [r3, #2]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	705a      	strb	r2, [r3, #1]
			update7SEG(traffic);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7fe fd2f 	bl	80006b8 <update7SEG>
		}
		break;
 8001c5a:	e022      	b.n	8001ca2 <fsm_traffic+0xb6>
	case GREEN:
		if(Tway->count_down == 0){
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d120      	bne.n	8001ca6 <fsm_traffic+0xba>
			*mode = YELLOW;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
			lit_yellow(Tway->way);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f84e 	bl	8001d10 <lit_yellow>
			Tway->count_down = Tway->yellow;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	78da      	ldrb	r2, [r3, #3]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	705a      	strb	r2, [r3, #1]
			update7SEG(traffic);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7fe fd1b 	bl	80006b8 <update7SEG>
		}
		break;
 8001c82:	e010      	b.n	8001ca6 <fsm_traffic+0xba>
	default:
		*mode = RED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
		lit_red(Tway->way);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f80e 	bl	8001cb0 <lit_red>
		Tway->count_down = Tway->red;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	789a      	ldrb	r2, [r3, #2]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	705a      	strb	r2, [r3, #1]
		break;
 8001c9c:	e004      	b.n	8001ca8 <fsm_traffic+0xbc>
		break;
 8001c9e:	bf00      	nop
 8001ca0:	e002      	b.n	8001ca8 <fsm_traffic+0xbc>
		break;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <fsm_traffic+0xbc>
		break;
 8001ca6:	bf00      	nop
	}
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <lit_red>:

void lit_red(whichWay way){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10e      	bne.n	8001cde <lit_red+0x2e>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4811      	ldr	r0, [pc, #68]	; (8001d0c <lit_red+0x5c>)
 8001cc6:	f000 fbaa 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2102      	movs	r1, #2
 8001cce:	480f      	ldr	r0, [pc, #60]	; (8001d0c <lit_red+0x5c>)
 8001cd0:	f000 fba5 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <lit_red+0x5c>)
 8001cda:	f000 fba0 	bl	800241e <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10e      	bne.n	8001d02 <lit_red+0x52>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <lit_red+0x5c>)
 8001cea:	f000 fb98 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <lit_red+0x5c>)
 8001cf4:	f000 fb93 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <lit_red+0x5c>)
 8001cfe:	f000 fb8e 	bl	800241e <HAL_GPIO_WritePin>
	}
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40010c00 	.word	0x40010c00

08001d10 <lit_yellow>:

void lit_yellow(whichWay way){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10e      	bne.n	8001d3e <lit_yellow+0x2e>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2102      	movs	r1, #2
 8001d24:	4811      	ldr	r0, [pc, #68]	; (8001d6c <lit_yellow+0x5c>)
 8001d26:	f000 fb7a 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <lit_yellow+0x5c>)
 8001d30:	f000 fb75 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2101      	movs	r1, #1
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <lit_yellow+0x5c>)
 8001d3a:	f000 fb70 	bl	800241e <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10e      	bne.n	8001d62 <lit_yellow+0x52>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2110      	movs	r1, #16
 8001d48:	4808      	ldr	r0, [pc, #32]	; (8001d6c <lit_yellow+0x5c>)
 8001d4a:	f000 fb68 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2120      	movs	r1, #32
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <lit_yellow+0x5c>)
 8001d54:	f000 fb63 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2108      	movs	r1, #8
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <lit_yellow+0x5c>)
 8001d5e:	f000 fb5e 	bl	800241e <HAL_GPIO_WritePin>
	}
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010c00 	.word	0x40010c00

08001d70 <lit_green>:

void lit_green(whichWay way){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10e      	bne.n	8001d9e <lit_green+0x2e>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2104      	movs	r1, #4
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <lit_green+0x5c>)
 8001d86:	f000 fb4a 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	480f      	ldr	r0, [pc, #60]	; (8001dcc <lit_green+0x5c>)
 8001d90:	f000 fb45 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2102      	movs	r1, #2
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <lit_green+0x5c>)
 8001d9a:	f000 fb40 	bl	800241e <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10e      	bne.n	8001dc2 <lit_green+0x52>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <lit_green+0x5c>)
 8001daa:	f000 fb38 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2108      	movs	r1, #8
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <lit_green+0x5c>)
 8001db4:	f000 fb33 	bl	800241e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2110      	movs	r1, #16
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <lit_green+0x5c>)
 8001dbe:	f000 fb2e 	bl	800241e <HAL_GPIO_WritePin>
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd0:	f7ff ff06 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd4:	480b      	ldr	r0, [pc, #44]	; (8001e04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dd6:	490c      	ldr	r1, [pc, #48]	; (8001e08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dec:	4c09      	ldr	r4, [pc, #36]	; (8001e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f001 fb53 	bl	80034a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfe:	f7ff fcd7 	bl	80017b0 <main>
  bx lr
 8001e02:	4770      	bx	lr
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e08:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001e0c:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8001e10:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001e14:	200001e0 	.word	0x200001e0

08001e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC1_2_IRQHandler>
	...

08001e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_Init+0x28>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_Init+0x28>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f923 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fe14 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f93b 	bl	80020e2 <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 f903 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000044 	.word	0x20000044
 8001ea0:	20000050 	.word	0x20000050
 8001ea4:	2000004c 	.word	0x2000004c

08001ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x1c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a03      	ldr	r2, [pc, #12]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000050 	.word	0x20000050
 8001ec8:	200001cc 	.word	0x200001cc

08001ecc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b02      	ldr	r3, [pc, #8]	; (8001edc <HAL_GetTick+0x10>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	200001cc 	.word	0x200001cc

08001ee0 <__NVIC_SetPriorityGrouping>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4906      	ldr	r1, [pc, #24]	; (8001f78 <__NVIC_EnableIRQ+0x34>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff90 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff2d 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff42 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff90 	bl	8001fd0 <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5f 	bl	8001f7c <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff35 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b08b      	sub	sp, #44	; 0x2c
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e148      	b.n	80023a2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002110:	2201      	movs	r2, #1
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 8137 	bne.w	800239c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4aa3      	ldr	r2, [pc, #652]	; (80023c0 <HAL_GPIO_Init+0x2c4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d05e      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002138:	4aa1      	ldr	r2, [pc, #644]	; (80023c0 <HAL_GPIO_Init+0x2c4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d875      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 800213e:	4aa1      	ldr	r2, [pc, #644]	; (80023c4 <HAL_GPIO_Init+0x2c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d058      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002144:	4a9f      	ldr	r2, [pc, #636]	; (80023c4 <HAL_GPIO_Init+0x2c8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d86f      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 800214a:	4a9f      	ldr	r2, [pc, #636]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d052      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002150:	4a9d      	ldr	r2, [pc, #628]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d869      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 8002156:	4a9d      	ldr	r2, [pc, #628]	; (80023cc <HAL_GPIO_Init+0x2d0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d04c      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 800215c:	4a9b      	ldr	r2, [pc, #620]	; (80023cc <HAL_GPIO_Init+0x2d0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d863      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 8002162:	4a9b      	ldr	r2, [pc, #620]	; (80023d0 <HAL_GPIO_Init+0x2d4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d046      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002168:	4a99      	ldr	r2, [pc, #612]	; (80023d0 <HAL_GPIO_Init+0x2d4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d85d      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 800216e:	2b12      	cmp	r3, #18
 8002170:	d82a      	bhi.n	80021c8 <HAL_GPIO_Init+0xcc>
 8002172:	2b12      	cmp	r3, #18
 8002174:	d859      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <HAL_GPIO_Init+0x80>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	080021f7 	.word	0x080021f7
 8002180:	080021d1 	.word	0x080021d1
 8002184:	080021e3 	.word	0x080021e3
 8002188:	08002225 	.word	0x08002225
 800218c:	0800222b 	.word	0x0800222b
 8002190:	0800222b 	.word	0x0800222b
 8002194:	0800222b 	.word	0x0800222b
 8002198:	0800222b 	.word	0x0800222b
 800219c:	0800222b 	.word	0x0800222b
 80021a0:	0800222b 	.word	0x0800222b
 80021a4:	0800222b 	.word	0x0800222b
 80021a8:	0800222b 	.word	0x0800222b
 80021ac:	0800222b 	.word	0x0800222b
 80021b0:	0800222b 	.word	0x0800222b
 80021b4:	0800222b 	.word	0x0800222b
 80021b8:	0800222b 	.word	0x0800222b
 80021bc:	0800222b 	.word	0x0800222b
 80021c0:	080021d9 	.word	0x080021d9
 80021c4:	080021ed 	.word	0x080021ed
 80021c8:	4a82      	ldr	r2, [pc, #520]	; (80023d4 <HAL_GPIO_Init+0x2d8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ce:	e02c      	b.n	800222a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e029      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	3304      	adds	r3, #4
 80021de:	623b      	str	r3, [r7, #32]
          break;
 80021e0:	e024      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	3308      	adds	r3, #8
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e01f      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	330c      	adds	r3, #12
 80021f2:	623b      	str	r3, [r7, #32]
          break;
 80021f4:	e01a      	b.n	800222c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fe:	2304      	movs	r3, #4
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e013      	b.n	800222c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800220c:	2308      	movs	r3, #8
 800220e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	611a      	str	r2, [r3, #16]
          break;
 8002216:	e009      	b.n	800222c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	615a      	str	r2, [r3, #20]
          break;
 8002222:	e003      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x130>
          break;
 800222a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d801      	bhi.n	8002236 <HAL_GPIO_Init+0x13a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	e001      	b.n	800223a <HAL_GPIO_Init+0x13e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2bff      	cmp	r3, #255	; 0xff
 8002240:	d802      	bhi.n	8002248 <HAL_GPIO_Init+0x14c>
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	e002      	b.n	800224e <HAL_GPIO_Init+0x152>
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3b08      	subs	r3, #8
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	210f      	movs	r1, #15
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	431a      	orrs	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8090 	beq.w	800239c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800227c:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a55      	ldr	r2, [pc, #340]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_GPIO_Init+0x2dc>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x2e0>)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a49      	ldr	r2, [pc, #292]	; (80023e0 <HAL_GPIO_Init+0x2e4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00d      	beq.n	80022dc <HAL_GPIO_Init+0x1e0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <HAL_GPIO_Init+0x1dc>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_GPIO_Init+0x2ec>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_GPIO_Init+0x1d8>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e004      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_GPIO_Init+0x1e2>
 80022dc:	2300      	movs	r3, #0
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	f002 0203 	and.w	r2, r2, #3
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	4093      	lsls	r3, r2
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ee:	493b      	ldr	r1, [pc, #236]	; (80023dc <HAL_GPIO_Init+0x2e0>)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002308:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	4937      	ldr	r1, [pc, #220]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002316:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	43db      	mvns	r3, r3
 800231e:	4933      	ldr	r1, [pc, #204]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002320:	4013      	ands	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	492d      	ldr	r1, [pc, #180]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	43db      	mvns	r3, r3
 8002346:	4929      	ldr	r1, [pc, #164]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002348:	4013      	ands	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4923      	ldr	r1, [pc, #140]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	43db      	mvns	r3, r3
 800236e:	491f      	ldr	r1, [pc, #124]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002370:	4013      	ands	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4919      	ldr	r1, [pc, #100]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	4915      	ldr	r1, [pc, #84]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002398:	4013      	ands	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3301      	adds	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f aeaf 	bne.w	8002110 <HAL_GPIO_Init+0x14>
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	372c      	adds	r7, #44	; 0x2c
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	10320000 	.word	0x10320000
 80023c4:	10310000 	.word	0x10310000
 80023c8:	10220000 	.word	0x10220000
 80023cc:	10210000 	.word	0x10210000
 80023d0:	10120000 	.word	0x10120000
 80023d4:	10110000 	.word	0x10110000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40010800 	.word	0x40010800
 80023e4:	40010c00 	.word	0x40010c00
 80023e8:	40011000 	.word	0x40011000
 80023ec:	40010400 	.word	0x40010400

080023f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	807b      	strh	r3, [r7, #2]
 800242a:	4613      	mov	r3, r2
 800242c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800242e:	787b      	ldrb	r3, [r7, #1]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002434:	887a      	ldrh	r2, [r7, #2]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800243a:	e003      	b.n	8002444 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	041a      	lsls	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	611a      	str	r2, [r3, #16]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	041a      	lsls	r2, r3, #16
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43d9      	mvns	r1, r3
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	400b      	ands	r3, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e036      	b.n	8002500 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800249a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f245 5255 	movw	r2, #21845	; 0x5555
 80024a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6852      	ldr	r2, [r2, #4]
 80024ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6892      	ldr	r2, [r2, #8]
 80024b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80024ba:	f7ff fd07 	bl	8001ecc <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80024c0:	e011      	b.n	80024e6 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80024c2:	f7ff fd03 	bl	8001ecc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 323c 	movw	r2, #4924	; 0x133c
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d908      	bls.n	80024e6 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e00c      	b.n	8002500 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e6      	bne.n	80024c2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80024fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002518:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
	...

08002528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e26c      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8087 	beq.w	8002656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002548:	4b92      	ldr	r3, [pc, #584]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b04      	cmp	r3, #4
 8002552:	d00c      	beq.n	800256e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002554:	4b8f      	ldr	r3, [pc, #572]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d112      	bne.n	8002586 <HAL_RCC_OscConfig+0x5e>
 8002560:	4b8c      	ldr	r3, [pc, #560]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256c:	d10b      	bne.n	8002586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256e:	4b89      	ldr	r3, [pc, #548]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d06c      	beq.n	8002654 <HAL_RCC_OscConfig+0x12c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d168      	bne.n	8002654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e246      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x76>
 8002590:	4b80      	ldr	r3, [pc, #512]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a7f      	ldr	r2, [pc, #508]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	e02e      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x98>
 80025a6:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7a      	ldr	r2, [pc, #488]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b78      	ldr	r3, [pc, #480]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a77      	ldr	r2, [pc, #476]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0xbc>
 80025ca:	4b72      	ldr	r3, [pc, #456]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a71      	ldr	r2, [pc, #452]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 80025e4:	4b6b      	ldr	r3, [pc, #428]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b68      	ldr	r3, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a67      	ldr	r2, [pc, #412]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff fc62 	bl	8001ecc <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff fc5e 	bl	8001ecc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1fa      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xe4>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fc4e 	bl	8001ecc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff fc4a 	bl	8001ecc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1e6      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x10c>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002662:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800266e:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x18c>
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x176>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1ba      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4939      	ldr	r1, [pc, #228]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <HAL_RCC_OscConfig+0x270>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7ff fc03 	bl	8001ecc <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff fbff 	bl	8001ecc <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e19b      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4927      	ldr	r1, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x270>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff fbe2 	bl	8001ecc <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff fbde 	bl	8001ecc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e17a      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03a      	beq.n	80027ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d019      	beq.n	8002772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_RCC_OscConfig+0x274>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7ff fbc2 	bl	8001ecc <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff fbbe 	bl	8001ecc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e15a      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_RCC_OscConfig+0x26c>)
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800276a:	2001      	movs	r0, #1
 800276c:	f000 fa9a 	bl	8002ca4 <RCC_Delay>
 8002770:	e01c      	b.n	80027ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_RCC_OscConfig+0x274>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7ff fba8 	bl	8001ecc <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277e:	e00f      	b.n	80027a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7ff fba4 	bl	8001ecc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d908      	bls.n	80027a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e140      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	42420000 	.word	0x42420000
 800279c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e9      	bne.n	8002780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a6 	beq.w	8002906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b97      	ldr	r3, [pc, #604]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4a93      	ldr	r2, [pc, #588]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	61d3      	str	r3, [r2, #28]
 80027d6:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f2:	4b8b      	ldr	r3, [pc, #556]	; (8002a20 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a8a      	ldr	r2, [pc, #552]	; (8002a20 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fe:	f7ff fb65 	bl	8001ecc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7ff fb61 	bl	8001ecc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b64      	cmp	r3, #100	; 0x64
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0fd      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	4b81      	ldr	r3, [pc, #516]	; (8002a20 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x312>
 800282c:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a7a      	ldr	r2, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	e02d      	b.n	8002896 <HAL_RCC_OscConfig+0x36e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x334>
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	4b73      	ldr	r3, [pc, #460]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
 800285a:	e01c      	b.n	8002896 <HAL_RCC_OscConfig+0x36e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d10c      	bne.n	800287e <HAL_RCC_OscConfig+0x356>
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a6c      	ldr	r2, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 800286a:	f043 0304 	orr.w	r3, r3, #4
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a69      	ldr	r2, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6213      	str	r3, [r2, #32]
 800287c:	e00b      	b.n	8002896 <HAL_RCC_OscConfig+0x36e>
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a66      	ldr	r2, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4a63      	ldr	r2, [pc, #396]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d015      	beq.n	80028ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289e:	f7ff fb15 	bl	8001ecc <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7ff fb11 	bl	8001ecc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e0ab      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ee      	beq.n	80028a6 <HAL_RCC_OscConfig+0x37e>
 80028c8:	e014      	b.n	80028f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7ff faff 	bl	8001ecc <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7ff fafb 	bl	8001ecc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e095      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e8:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ee      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8081 	beq.w	8002a12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d061      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d146      	bne.n	80029b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002924:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_RCC_OscConfig+0x4fc>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7ff facf 	bl	8001ecc <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7ff facb 	bl	8001ecc <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e067      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d108      	bne.n	800296c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	492d      	ldr	r1, [pc, #180]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a19      	ldr	r1, [r3, #32]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	430b      	orrs	r3, r1
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x4fc>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7ff fa9f 	bl	8001ecc <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7ff fa9b 	bl	8001ecc <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e037      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x46a>
 80029b0:	e02f      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_RCC_OscConfig+0x4fc>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff fa88 	bl	8001ecc <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff fa84 	bl	8001ecc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e020      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x498>
 80029de:	e018      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e013      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42420060 	.word	0x42420060

08002a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0d0      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d910      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4965      	ldr	r1, [pc, #404]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b8      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a84:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	494d      	ldr	r1, [pc, #308]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d040      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d115      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e073      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06b      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4936      	ldr	r1, [pc, #216]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7ff f9d8 	bl	8001ecc <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7ff f9d4 	bl	8001ecc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e053      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d210      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	4922      	ldr	r1, [pc, #136]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e032      	b.n	8002bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bb6:	f000 f821 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f936 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080036bc 	.word	0x080036bc
 8002bf4:	20000044 	.word	0x20000044
 8002bf8:	2000004c 	.word	0x2000004c

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x30>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
 8002c2a:	e027      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	e027      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0c5b      	lsrs	r3, r3, #17
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	fb02 f203 	mul.w	r2, r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e004      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	613b      	str	r3, [r7, #16]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7e:	613b      	str	r3, [r7, #16]
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	693b      	ldr	r3, [r7, #16]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	080036cc 	.word	0x080036cc
 8002c9c:	080036dc 	.word	0x080036dc
 8002ca0:	003d0900 	.word	0x003d0900

08002ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <RCC_Delay+0x34>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <RCC_Delay+0x38>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cc0:	bf00      	nop
  }
  while (Delay --);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	60fa      	str	r2, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <RCC_Delay+0x1c>
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000044 	.word	0x20000044
 8002cdc:	10624dd3 	.word	0x10624dd3

08002ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e041      	b.n	8002d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fede 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f000 fa56 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d001      	beq.n	8002d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e035      	b.n	8002e04 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_TIM_Base_Start_IT+0x90>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_TIM_Base_Start_IT+0x4e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_Base_Start_IT+0x4e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_TIM_Base_Start_IT+0x94>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d010      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	e007      	b.n	8002e02 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40000400 	.word	0x40000400

08002e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d020      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01b      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0202 	mvn.w	r2, #2
 8002e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f998 	bl	8003198 <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f98b 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f99a 	bl	80031aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0204 	mvn.w	r2, #4
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f972 	bl	8003198 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f965 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f974 	bl	80031aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0208 	mvn.w	r2, #8
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f94c 	bl	8003198 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f93f 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f94e 	bl	80031aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0210 	mvn.w	r2, #16
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2208      	movs	r2, #8
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f926 	bl	8003198 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f919 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f928 	bl	80031aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0201 	mvn.w	r2, #1
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fadc 	bl	800053c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa6f 	bl	8003486 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00c      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8f8 	bl	80031bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0220 	mvn.w	r2, #32
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa42 	bl	8003474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIM_ConfigClockSource+0x1c>
 8003010:	2302      	movs	r3, #2
 8003012:	e0b4      	b.n	800317e <HAL_TIM_ConfigClockSource+0x186>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304c:	d03e      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xd4>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	f200 8087 	bhi.w	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	f000 8086 	beq.w	800316a <HAL_TIM_ConfigClockSource+0x172>
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003062:	d87f      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d01a      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xa6>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d87b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d050      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x11a>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d877      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b50      	cmp	r3, #80	; 0x50
 8003076:	d03c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d873      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d058      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x13a>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d86f      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	d064      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d86b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b20      	cmp	r3, #32
 800308e:	d060      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15a>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d867      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15a>
 8003098:	2b10      	cmp	r3, #16
 800309a:	d05a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	e062      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f000 f96a 	bl	8003386 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	609a      	str	r2, [r3, #8]
      break;
 80030ca:	e04f      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f000 f953 	bl	8003386 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ee:	609a      	str	r2, [r3, #8]
      break;
 80030f0:	e03c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f000 f8ca 	bl	8003298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2150      	movs	r1, #80	; 0x50
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f921 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8003110:	e02c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	f000 f8e8 	bl	80032f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2160      	movs	r1, #96	; 0x60
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f911 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8003130:	e01c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	461a      	mov	r2, r3
 8003140:	f000 f8aa 	bl	8003298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2140      	movs	r1, #64	; 0x40
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f901 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8003150:	e00c      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f000 f8f8 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8003162:	e003      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      break;
 8003168:	e000      	b.n	800316c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800316a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
	...

080031d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d007      	beq.n	80031f8 <TIM_Base_SetConfig+0x28>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d003      	beq.n	80031f8 <TIM_Base_SetConfig+0x28>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a28      	ldr	r2, [pc, #160]	; (8003294 <TIM_Base_SetConfig+0xc4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d108      	bne.n	800320a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a20      	ldr	r2, [pc, #128]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x52>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x52>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <TIM_Base_SetConfig+0xc4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <TIM_Base_SetConfig+0xc0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d103      	bne.n	8003268 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	611a      	str	r2, [r3, #16]
  }
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40000400 	.word	0x40000400

08003298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0201 	bic.w	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 030a 	bic.w	r3, r3, #10
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f023 0210 	bic.w	r2, r3, #16
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800331e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	031b      	lsls	r3, r3, #12
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003330:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	f043 0307 	orr.w	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	609a      	str	r2, [r3, #8]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e041      	b.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d009      	beq.n	8003434 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d004      	beq.n	8003434 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800343a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4313      	orrs	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40000400 	.word	0x40000400

08003474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <__errno>:
 8003498:	4b01      	ldr	r3, [pc, #4]	; (80034a0 <__errno+0x8>)
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000054 	.word	0x20000054

080034a4 <__libc_init_array>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	2600      	movs	r6, #0
 80034a8:	4d0c      	ldr	r5, [pc, #48]	; (80034dc <__libc_init_array+0x38>)
 80034aa:	4c0d      	ldr	r4, [pc, #52]	; (80034e0 <__libc_init_array+0x3c>)
 80034ac:	1b64      	subs	r4, r4, r5
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	42a6      	cmp	r6, r4
 80034b2:	d109      	bne.n	80034c8 <__libc_init_array+0x24>
 80034b4:	f000 f8f6 	bl	80036a4 <_init>
 80034b8:	2600      	movs	r6, #0
 80034ba:	4d0a      	ldr	r5, [pc, #40]	; (80034e4 <__libc_init_array+0x40>)
 80034bc:	4c0a      	ldr	r4, [pc, #40]	; (80034e8 <__libc_init_array+0x44>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	42a6      	cmp	r6, r4
 80034c4:	d105      	bne.n	80034d2 <__libc_init_array+0x2e>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034cc:	4798      	blx	r3
 80034ce:	3601      	adds	r6, #1
 80034d0:	e7ee      	b.n	80034b0 <__libc_init_array+0xc>
 80034d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d6:	4798      	blx	r3
 80034d8:	3601      	adds	r6, #1
 80034da:	e7f2      	b.n	80034c2 <__libc_init_array+0x1e>
 80034dc:	080036e0 	.word	0x080036e0
 80034e0:	080036e0 	.word	0x080036e0
 80034e4:	080036e0 	.word	0x080036e0
 80034e8:	080036e4 	.word	0x080036e4

080034ec <malloc>:
 80034ec:	4b02      	ldr	r3, [pc, #8]	; (80034f8 <malloc+0xc>)
 80034ee:	4601      	mov	r1, r0
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f000 b85f 	b.w	80035b4 <_malloc_r>
 80034f6:	bf00      	nop
 80034f8:	20000054 	.word	0x20000054

080034fc <free>:
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <free+0xc>)
 80034fe:	4601      	mov	r1, r0
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	f000 b80b 	b.w	800351c <_free_r>
 8003506:	bf00      	nop
 8003508:	20000054 	.word	0x20000054

0800350c <memset>:
 800350c:	4603      	mov	r3, r0
 800350e:	4402      	add	r2, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <_free_r>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	4605      	mov	r5, r0
 8003520:	2900      	cmp	r1, #0
 8003522:	d043      	beq.n	80035ac <_free_r+0x90>
 8003524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003528:	1f0c      	subs	r4, r1, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	bfb8      	it	lt
 800352e:	18e4      	addlt	r4, r4, r3
 8003530:	f000 f8aa 	bl	8003688 <__malloc_lock>
 8003534:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <_free_r+0x94>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	4610      	mov	r0, r2
 800353a:	b933      	cbnz	r3, 800354a <_free_r+0x2e>
 800353c:	6063      	str	r3, [r4, #4]
 800353e:	6014      	str	r4, [r2, #0]
 8003540:	4628      	mov	r0, r5
 8003542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003546:	f000 b8a5 	b.w	8003694 <__malloc_unlock>
 800354a:	42a3      	cmp	r3, r4
 800354c:	d90a      	bls.n	8003564 <_free_r+0x48>
 800354e:	6821      	ldr	r1, [r4, #0]
 8003550:	1862      	adds	r2, r4, r1
 8003552:	4293      	cmp	r3, r2
 8003554:	bf01      	itttt	eq
 8003556:	681a      	ldreq	r2, [r3, #0]
 8003558:	685b      	ldreq	r3, [r3, #4]
 800355a:	1852      	addeq	r2, r2, r1
 800355c:	6022      	streq	r2, [r4, #0]
 800355e:	6063      	str	r3, [r4, #4]
 8003560:	6004      	str	r4, [r0, #0]
 8003562:	e7ed      	b.n	8003540 <_free_r+0x24>
 8003564:	461a      	mov	r2, r3
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	b10b      	cbz	r3, 800356e <_free_r+0x52>
 800356a:	42a3      	cmp	r3, r4
 800356c:	d9fa      	bls.n	8003564 <_free_r+0x48>
 800356e:	6811      	ldr	r1, [r2, #0]
 8003570:	1850      	adds	r0, r2, r1
 8003572:	42a0      	cmp	r0, r4
 8003574:	d10b      	bne.n	800358e <_free_r+0x72>
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	4401      	add	r1, r0
 800357a:	1850      	adds	r0, r2, r1
 800357c:	4283      	cmp	r3, r0
 800357e:	6011      	str	r1, [r2, #0]
 8003580:	d1de      	bne.n	8003540 <_free_r+0x24>
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4401      	add	r1, r0
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	6053      	str	r3, [r2, #4]
 800358c:	e7d8      	b.n	8003540 <_free_r+0x24>
 800358e:	d902      	bls.n	8003596 <_free_r+0x7a>
 8003590:	230c      	movs	r3, #12
 8003592:	602b      	str	r3, [r5, #0]
 8003594:	e7d4      	b.n	8003540 <_free_r+0x24>
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	1821      	adds	r1, r4, r0
 800359a:	428b      	cmp	r3, r1
 800359c:	bf01      	itttt	eq
 800359e:	6819      	ldreq	r1, [r3, #0]
 80035a0:	685b      	ldreq	r3, [r3, #4]
 80035a2:	1809      	addeq	r1, r1, r0
 80035a4:	6021      	streq	r1, [r4, #0]
 80035a6:	6063      	str	r3, [r4, #4]
 80035a8:	6054      	str	r4, [r2, #4]
 80035aa:	e7c9      	b.n	8003540 <_free_r+0x24>
 80035ac:	bd38      	pop	{r3, r4, r5, pc}
 80035ae:	bf00      	nop
 80035b0:	20000108 	.word	0x20000108

080035b4 <_malloc_r>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	1ccd      	adds	r5, r1, #3
 80035b8:	f025 0503 	bic.w	r5, r5, #3
 80035bc:	3508      	adds	r5, #8
 80035be:	2d0c      	cmp	r5, #12
 80035c0:	bf38      	it	cc
 80035c2:	250c      	movcc	r5, #12
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	4606      	mov	r6, r0
 80035c8:	db01      	blt.n	80035ce <_malloc_r+0x1a>
 80035ca:	42a9      	cmp	r1, r5
 80035cc:	d903      	bls.n	80035d6 <_malloc_r+0x22>
 80035ce:	230c      	movs	r3, #12
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	2000      	movs	r0, #0
 80035d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d6:	f000 f857 	bl	8003688 <__malloc_lock>
 80035da:	4921      	ldr	r1, [pc, #132]	; (8003660 <_malloc_r+0xac>)
 80035dc:	680a      	ldr	r2, [r1, #0]
 80035de:	4614      	mov	r4, r2
 80035e0:	b99c      	cbnz	r4, 800360a <_malloc_r+0x56>
 80035e2:	4f20      	ldr	r7, [pc, #128]	; (8003664 <_malloc_r+0xb0>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	b923      	cbnz	r3, 80035f2 <_malloc_r+0x3e>
 80035e8:	4621      	mov	r1, r4
 80035ea:	4630      	mov	r0, r6
 80035ec:	f000 f83c 	bl	8003668 <_sbrk_r>
 80035f0:	6038      	str	r0, [r7, #0]
 80035f2:	4629      	mov	r1, r5
 80035f4:	4630      	mov	r0, r6
 80035f6:	f000 f837 	bl	8003668 <_sbrk_r>
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d123      	bne.n	8003646 <_malloc_r+0x92>
 80035fe:	230c      	movs	r3, #12
 8003600:	4630      	mov	r0, r6
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	f000 f846 	bl	8003694 <__malloc_unlock>
 8003608:	e7e3      	b.n	80035d2 <_malloc_r+0x1e>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	1b5b      	subs	r3, r3, r5
 800360e:	d417      	bmi.n	8003640 <_malloc_r+0x8c>
 8003610:	2b0b      	cmp	r3, #11
 8003612:	d903      	bls.n	800361c <_malloc_r+0x68>
 8003614:	6023      	str	r3, [r4, #0]
 8003616:	441c      	add	r4, r3
 8003618:	6025      	str	r5, [r4, #0]
 800361a:	e004      	b.n	8003626 <_malloc_r+0x72>
 800361c:	6863      	ldr	r3, [r4, #4]
 800361e:	42a2      	cmp	r2, r4
 8003620:	bf0c      	ite	eq
 8003622:	600b      	streq	r3, [r1, #0]
 8003624:	6053      	strne	r3, [r2, #4]
 8003626:	4630      	mov	r0, r6
 8003628:	f000 f834 	bl	8003694 <__malloc_unlock>
 800362c:	f104 000b 	add.w	r0, r4, #11
 8003630:	1d23      	adds	r3, r4, #4
 8003632:	f020 0007 	bic.w	r0, r0, #7
 8003636:	1ac2      	subs	r2, r0, r3
 8003638:	d0cc      	beq.n	80035d4 <_malloc_r+0x20>
 800363a:	1a1b      	subs	r3, r3, r0
 800363c:	50a3      	str	r3, [r4, r2]
 800363e:	e7c9      	b.n	80035d4 <_malloc_r+0x20>
 8003640:	4622      	mov	r2, r4
 8003642:	6864      	ldr	r4, [r4, #4]
 8003644:	e7cc      	b.n	80035e0 <_malloc_r+0x2c>
 8003646:	1cc4      	adds	r4, r0, #3
 8003648:	f024 0403 	bic.w	r4, r4, #3
 800364c:	42a0      	cmp	r0, r4
 800364e:	d0e3      	beq.n	8003618 <_malloc_r+0x64>
 8003650:	1a21      	subs	r1, r4, r0
 8003652:	4630      	mov	r0, r6
 8003654:	f000 f808 	bl	8003668 <_sbrk_r>
 8003658:	3001      	adds	r0, #1
 800365a:	d1dd      	bne.n	8003618 <_malloc_r+0x64>
 800365c:	e7cf      	b.n	80035fe <_malloc_r+0x4a>
 800365e:	bf00      	nop
 8003660:	20000108 	.word	0x20000108
 8003664:	2000010c 	.word	0x2000010c

08003668 <_sbrk_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	2300      	movs	r3, #0
 800366c:	4d05      	ldr	r5, [pc, #20]	; (8003684 <_sbrk_r+0x1c>)
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fe fa7e 	bl	8001b74 <_sbrk>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_sbrk_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_sbrk_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	200001d0 	.word	0x200001d0

08003688 <__malloc_lock>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__malloc_lock+0x8>)
 800368a:	f000 b809 	b.w	80036a0 <__retarget_lock_acquire_recursive>
 800368e:	bf00      	nop
 8003690:	200001d8 	.word	0x200001d8

08003694 <__malloc_unlock>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__malloc_unlock+0x8>)
 8003696:	f000 b804 	b.w	80036a2 <__retarget_lock_release_recursive>
 800369a:	bf00      	nop
 800369c:	200001d8 	.word	0x200001d8

080036a0 <__retarget_lock_acquire_recursive>:
 80036a0:	4770      	bx	lr

080036a2 <__retarget_lock_release_recursive>:
 80036a2:	4770      	bx	lr

080036a4 <_init>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr

080036b0 <_fini>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	bf00      	nop
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr
